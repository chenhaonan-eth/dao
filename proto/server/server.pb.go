// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: server/server.proto

package server

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FturesFoewignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *FturesFoewignRequest) Reset() {
	*x = FturesFoewignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FturesFoewignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FturesFoewignRequest) ProtoMessage() {}

func (x *FturesFoewignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FturesFoewignRequest.ProtoReflect.Descriptor instead.
func (*FturesFoewignRequest) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{0}
}

func (x *FturesFoewignRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SocialFinancingStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SocialFinancingStock `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SocialFinancingStockResponse) Reset() {
	*x = SocialFinancingStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialFinancingStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialFinancingStockResponse) ProtoMessage() {}

func (x *SocialFinancingStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialFinancingStockResponse.ProtoReflect.Descriptor instead.
func (*SocialFinancingStockResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{1}
}

func (x *SocialFinancingStockResponse) GetResults() []*SocialFinancingStock {
	if x != nil {
		return x.Results
	}
	return nil
}

type SocialFinancingStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                            string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                                                   //时间
	Ndbab                           string `protobuf:"bytes,2,opt,name=ndbab,proto3" json:"ndbab,omitempty"`                                                                 //其中-未贴现银行承兑汇票
	Entrustloan                     string `protobuf:"bytes,3,opt,name=entrustloan,proto3" json:"entrustloan,omitempty"`                                                     //其中-委托贷款
	Forcloan                        string `protobuf:"bytes,4,opt,name=forcloan,proto3" json:"forcloan,omitempty"`                                                           //其中-委托贷款外币(折合人民币)
	Rmblaon                         string `protobuf:"bytes,5,opt,name=rmblaon,proto3" json:"rmblaon,omitempty"`                                                             //其中-人民币贷款
	Bibae                           string `protobuf:"bytes,6,opt,name=bibae,proto3" json:"bibae,omitempty"`                                                                 //其中-企业债券
	Tiosfs                          string `protobuf:"bytes,7,opt,name=tiosfs,proto3" json:"tiosfs,omitempty"`                                                               //社会融资规模增量(亿元)/存量
	Sfinfe                          string `protobuf:"bytes,8,opt,name=sfinfe,proto3" json:"sfinfe,omitempty"`                                                               //其中-非金融企业境内股票融资
	Trustloan                       string `protobuf:"bytes,9,opt,name=trustloan,proto3" json:"trustloan,omitempty"`                                                         //其中-信托贷款
	AssetBackedSecurities           string `protobuf:"bytes,10,opt,name=asset_backed_securities,json=assetBackedSecurities,proto3" json:"asset_backed_securities,omitempty"` //存款类金融机构资产支持证券
	LoansWrittenOff                 string `protobuf:"bytes,11,opt,name=loans_written_off,json=loansWrittenOff,proto3" json:"loans_written_off,omitempty"`                   //贷款核销
	GovernmentBonds                 string `protobuf:"bytes,12,opt,name=government_bonds,json=governmentBonds,proto3" json:"government_bonds,omitempty"`                     //政府债券
	Ndbabgrowthrate                 string `protobuf:"bytes,13,opt,name=ndbabgrowthrate,proto3" json:"ndbabgrowthrate,omitempty"`                                            //增速（%）
	Entrustloangrowthrate           string `protobuf:"bytes,14,opt,name=entrustloangrowthrate,proto3" json:"entrustloangrowthrate,omitempty"`
	Forcloangrowthrate              string `protobuf:"bytes,15,opt,name=forcloangrowthrate,proto3" json:"forcloangrowthrate,omitempty"`
	Rmblaongrowthrate               string `protobuf:"bytes,16,opt,name=rmblaongrowthrate,proto3" json:"rmblaongrowthrate,omitempty"`
	Bibaegrowthrate                 string `protobuf:"bytes,17,opt,name=bibaegrowthrate,proto3" json:"bibaegrowthrate,omitempty"`
	Tiosfsgrowthrate                string `protobuf:"bytes,18,opt,name=tiosfsgrowthrate,proto3" json:"tiosfsgrowthrate,omitempty"`
	Sfinfegrowthrate                string `protobuf:"bytes,19,opt,name=sfinfegrowthrate,proto3" json:"sfinfegrowthrate,omitempty"`
	Trustloangrowthrate             string `protobuf:"bytes,20,opt,name=trustloangrowthrate,proto3" json:"trustloangrowthrate,omitempty"`
	AssetBackedSecuritiesgrowthrate string `protobuf:"bytes,21,opt,name=asset_backed_securitiesgrowthrate,json=assetBackedSecuritiesgrowthrate,proto3" json:"asset_backed_securitiesgrowthrate,omitempty"`
	LoansWrittenOffgrowthrate       string `protobuf:"bytes,22,opt,name=loans_written_offgrowthrate,json=loansWrittenOffgrowthrate,proto3" json:"loans_written_offgrowthrate,omitempty"`
	GovernmentBondsgrowthrate       string `protobuf:"bytes,23,opt,name=government_bondsgrowthrate,json=governmentBondsgrowthrate,proto3" json:"government_bondsgrowthrate,omitempty"`
}

func (x *SocialFinancingStock) Reset() {
	*x = SocialFinancingStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialFinancingStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialFinancingStock) ProtoMessage() {}

func (x *SocialFinancingStock) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialFinancingStock.ProtoReflect.Descriptor instead.
func (*SocialFinancingStock) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{2}
}

func (x *SocialFinancingStock) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SocialFinancingStock) GetNdbab() string {
	if x != nil {
		return x.Ndbab
	}
	return ""
}

func (x *SocialFinancingStock) GetEntrustloan() string {
	if x != nil {
		return x.Entrustloan
	}
	return ""
}

func (x *SocialFinancingStock) GetForcloan() string {
	if x != nil {
		return x.Forcloan
	}
	return ""
}

func (x *SocialFinancingStock) GetRmblaon() string {
	if x != nil {
		return x.Rmblaon
	}
	return ""
}

func (x *SocialFinancingStock) GetBibae() string {
	if x != nil {
		return x.Bibae
	}
	return ""
}

func (x *SocialFinancingStock) GetTiosfs() string {
	if x != nil {
		return x.Tiosfs
	}
	return ""
}

func (x *SocialFinancingStock) GetSfinfe() string {
	if x != nil {
		return x.Sfinfe
	}
	return ""
}

func (x *SocialFinancingStock) GetTrustloan() string {
	if x != nil {
		return x.Trustloan
	}
	return ""
}

func (x *SocialFinancingStock) GetAssetBackedSecurities() string {
	if x != nil {
		return x.AssetBackedSecurities
	}
	return ""
}

func (x *SocialFinancingStock) GetLoansWrittenOff() string {
	if x != nil {
		return x.LoansWrittenOff
	}
	return ""
}

func (x *SocialFinancingStock) GetGovernmentBonds() string {
	if x != nil {
		return x.GovernmentBonds
	}
	return ""
}

func (x *SocialFinancingStock) GetNdbabgrowthrate() string {
	if x != nil {
		return x.Ndbabgrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetEntrustloangrowthrate() string {
	if x != nil {
		return x.Entrustloangrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetForcloangrowthrate() string {
	if x != nil {
		return x.Forcloangrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetRmblaongrowthrate() string {
	if x != nil {
		return x.Rmblaongrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetBibaegrowthrate() string {
	if x != nil {
		return x.Bibaegrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetTiosfsgrowthrate() string {
	if x != nil {
		return x.Tiosfsgrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetSfinfegrowthrate() string {
	if x != nil {
		return x.Sfinfegrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetTrustloangrowthrate() string {
	if x != nil {
		return x.Trustloangrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetAssetBackedSecuritiesgrowthrate() string {
	if x != nil {
		return x.AssetBackedSecuritiesgrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetLoansWrittenOffgrowthrate() string {
	if x != nil {
		return x.LoansWrittenOffgrowthrate
	}
	return ""
}

func (x *SocialFinancingStock) GetGovernmentBondsgrowthrate() string {
	if x != nil {
		return x.GovernmentBondsgrowthrate
	}
	return ""
}

// 外盘期货交易
type FturesFoewignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FturesFoewign `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FturesFoewignResponse) Reset() {
	*x = FturesFoewignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FturesFoewignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FturesFoewignResponse) ProtoMessage() {}

func (x *FturesFoewignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FturesFoewignResponse.ProtoReflect.Descriptor instead.
func (*FturesFoewignResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{3}
}

func (x *FturesFoewignResponse) GetResults() []*FturesFoewign {
	if x != nil {
		return x.Results
	}
	return nil
}

type FturesFoewign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`     //交易日
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` //品种
	Open   string `protobuf:"bytes,3,opt,name=open,proto3" json:"open,omitempty"`     //开盘价
	High   string `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`     //最高价
	Low    string `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`       //最低价
	Lose   string `protobuf:"bytes,6,opt,name=lose,proto3" json:"lose,omitempty"`     //收盘价
	Volume string `protobuf:"bytes,7,opt,name=volume,proto3" json:"volume,omitempty"` //成交量
}

func (x *FturesFoewign) Reset() {
	*x = FturesFoewign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FturesFoewign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FturesFoewign) ProtoMessage() {}

func (x *FturesFoewign) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FturesFoewign.ProtoReflect.Descriptor instead.
func (*FturesFoewign) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{4}
}

func (x *FturesFoewign) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *FturesFoewign) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FturesFoewign) GetOpen() string {
	if x != nil {
		return x.Open
	}
	return ""
}

func (x *FturesFoewign) GetHigh() string {
	if x != nil {
		return x.High
	}
	return ""
}

func (x *FturesFoewign) GetLow() string {
	if x != nil {
		return x.Low
	}
	return ""
}

func (x *FturesFoewign) GetLose() string {
	if x != nil {
		return x.Lose
	}
	return ""
}

func (x *FturesFoewign) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

type PpiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Ppi `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *PpiResponse) Reset() {
	*x = PpiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpiResponse) ProtoMessage() {}

func (x *PpiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpiResponse.ProtoReflect.Descriptor instead.
func (*PpiResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{5}
}

func (x *PpiResponse) GetResults() []*Ppi {
	if x != nil {
		return x.Results
	}
	return nil
}

type Ppi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                   // 2022-10-01 00:00:00
	Time         string  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                   // 2022年10月份
	Ppi          float64 `protobuf:"fixed64,3,opt,name=ppi,proto3" json:"ppi,omitempty"`                   // 工业品出厂价格指数
	YearOnYear   float64 `protobuf:"fixed64,4,opt,name=yearOnYear,proto3" json:"yearOnYear,omitempty"`     // 当月同比增长(%)
	Accumulative float64 `protobuf:"fixed64,5,opt,name=accumulative,proto3" json:"accumulative,omitempty"` // 累计
}

func (x *Ppi) Reset() {
	*x = Ppi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ppi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ppi) ProtoMessage() {}

func (x *Ppi) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ppi.ProtoReflect.Descriptor instead.
func (*Ppi) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{6}
}

func (x *Ppi) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Ppi) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Ppi) GetPpi() float64 {
	if x != nil {
		return x.Ppi
	}
	return 0
}

func (x *Ppi) GetYearOnYear() float64 {
	if x != nil {
		return x.YearOnYear
	}
	return 0
}

func (x *Ppi) GetAccumulative() float64 {
	if x != nil {
		return x.Accumulative
	}
	return 0
}

type GdpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Gdp `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GdpResponse) Reset() {
	*x = GdpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GdpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GdpResponse) ProtoMessage() {}

func (x *GdpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GdpResponse.ProtoReflect.Descriptor instead.
func (*GdpResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{7}
}

func (x *GdpResponse) GetResults() []*Gdp {
	if x != nil {
		return x.Results
	}
	return nil
}

type Gdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                          string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                                     // 2022-09-01 00:00:00
	Time                          string  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                                                     //"2022年第1-3季度"
	Gdp                           float64 `protobuf:"fixed64,3,opt,name=gdp,proto3" json:"gdp,omitempty"`                                                     // 国内生产总值(亿元)
	GdpYearOnYear                 float64 `protobuf:"fixed64,4,opt,name=gdpYearOnYear,proto3" json:"gdpYearOnYear,omitempty"`                                 // 国内生产总值季度累计同比增长（%）
	PrimaryIndustry               float64 `protobuf:"fixed64,5,opt,name=primaryIndustry,proto3" json:"primaryIndustry,omitempty"`                             // 第一产业增加值（亿元）
	PrimaryIndustryYearOnYear     float64 `protobuf:"fixed64,6,opt,name=primaryIndustryYearOnYear,proto3" json:"primaryIndustryYearOnYear,omitempty"`         // 第一产业增加值季度累计同比增长（%）
	SecondaryIndustries           float64 `protobuf:"fixed64,7,opt,name=secondaryIndustries,proto3" json:"secondaryIndustries,omitempty"`                     // 第二产业增加值（亿元）
	SecondaryIndustriesYearOnYear float64 `protobuf:"fixed64,8,opt,name=secondaryIndustriesYearOnYear,proto3" json:"secondaryIndustriesYearOnYear,omitempty"` // 第二产业增加值季度累计同比增长（%）
	TertiaryIndustry              float64 `protobuf:"fixed64,9,opt,name=tertiaryIndustry,proto3" json:"tertiaryIndustry,omitempty"`                           // 第三产业增加值（亿元）
	TertiaryIndustryYearOnYear    float64 `protobuf:"fixed64,10,opt,name=tertiaryIndustryYearOnYear,proto3" json:"tertiaryIndustryYearOnYear,omitempty"`      // 第三产业增加值季度累计同比增长（%）
}

func (x *Gdp) Reset() {
	*x = Gdp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gdp) ProtoMessage() {}

func (x *Gdp) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gdp.ProtoReflect.Descriptor instead.
func (*Gdp) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{8}
}

func (x *Gdp) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Gdp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Gdp) GetGdp() float64 {
	if x != nil {
		return x.Gdp
	}
	return 0
}

func (x *Gdp) GetGdpYearOnYear() float64 {
	if x != nil {
		return x.GdpYearOnYear
	}
	return 0
}

func (x *Gdp) GetPrimaryIndustry() float64 {
	if x != nil {
		return x.PrimaryIndustry
	}
	return 0
}

func (x *Gdp) GetPrimaryIndustryYearOnYear() float64 {
	if x != nil {
		return x.PrimaryIndustryYearOnYear
	}
	return 0
}

func (x *Gdp) GetSecondaryIndustries() float64 {
	if x != nil {
		return x.SecondaryIndustries
	}
	return 0
}

func (x *Gdp) GetSecondaryIndustriesYearOnYear() float64 {
	if x != nil {
		return x.SecondaryIndustriesYearOnYear
	}
	return 0
}

func (x *Gdp) GetTertiaryIndustry() float64 {
	if x != nil {
		return x.TertiaryIndustry
	}
	return 0
}

func (x *Gdp) GetTertiaryIndustryYearOnYear() float64 {
	if x != nil {
		return x.TertiaryIndustryYearOnYear
	}
	return 0
}

type PmiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Pmi `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *PmiResponse) Reset() {
	*x = PmiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmiResponse) ProtoMessage() {}

func (x *PmiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmiResponse.ProtoReflect.Descriptor instead.
func (*PmiResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{9}
}

func (x *PmiResponse) GetResults() []*Pmi {
	if x != nil {
		return x.Results
	}
	return nil
}

type Pmi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                       string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                               // 2022-10-01 00:00:00
	Time                       string  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                                               // 2022年10月份
	Manufacturing              float64 `protobuf:"fixed64,3,opt,name=manufacturing,proto3" json:"manufacturing,omitempty"`                           // 制造业
	ManufacturingYearOnYear    float64 `protobuf:"fixed64,4,opt,name=manufacturingYearOnYear,proto3" json:"manufacturingYearOnYear,omitempty"`       // 同比增加(%)
	NonManufacturing           float64 `protobuf:"fixed64,5,opt,name=nonManufacturing,proto3" json:"nonManufacturing,omitempty"`                     // 非制造业
	NonManufacturingYearOnYear float64 `protobuf:"fixed64,6,opt,name=nonManufacturingYearOnYear,proto3" json:"nonManufacturingYearOnYear,omitempty"` // 同比增加(%)
}

func (x *Pmi) Reset() {
	*x = Pmi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pmi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pmi) ProtoMessage() {}

func (x *Pmi) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pmi.ProtoReflect.Descriptor instead.
func (*Pmi) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{10}
}

func (x *Pmi) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Pmi) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Pmi) GetManufacturing() float64 {
	if x != nil {
		return x.Manufacturing
	}
	return 0
}

func (x *Pmi) GetManufacturingYearOnYear() float64 {
	if x != nil {
		return x.ManufacturingYearOnYear
	}
	return 0
}

func (x *Pmi) GetNonManufacturing() float64 {
	if x != nil {
		return x.NonManufacturing
	}
	return 0
}

func (x *Pmi) GetNonManufacturingYearOnYear() float64 {
	if x != nil {
		return x.NonManufacturingYearOnYear
	}
	return 0
}

type CpiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Cpi `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CpiResponse) Reset() {
	*x = CpiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpiResponse) ProtoMessage() {}

func (x *CpiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpiResponse.ProtoReflect.Descriptor instead.
func (*CpiResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{11}
}

func (x *CpiResponse) GetResults() []*Cpi {
	if x != nil {
		return x.Results
	}
	return nil
}

type Cpi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                 string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                   // 2022-10-01 00:00:00
	Time                 string  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                                   // 2022年10月份
	National             float64 `protobuf:"fixed64,3,opt,name=national,proto3" json:"national,omitempty"`                         // 全国当月
	NationalYearOnYear   float64 `protobuf:"fixed64,4,opt,name=nationalYearOnYear,proto3" json:"nationalYearOnYear,omitempty"`     // 全国同比增加(%)
	NationalYearOverYear float64 `protobuf:"fixed64,5,opt,name=nationalYearOverYear,proto3" json:"nationalYearOverYear,omitempty"` // 全国环比增长(%)
	NationalAccumulative float64 `protobuf:"fixed64,6,opt,name=nationalAccumulative,proto3" json:"nationalAccumulative,omitempty"` // 全国累计
	City                 float64 `protobuf:"fixed64,7,opt,name=city,proto3" json:"city,omitempty"`                                 // 城市当月
	CityYearOnYear       float64 `protobuf:"fixed64,8,opt,name=cityYearOnYear,proto3" json:"cityYearOnYear,omitempty"`             // 城市同比增加(%)
	CityYearOverYear     float64 `protobuf:"fixed64,9,opt,name=cityYearOverYear,proto3" json:"cityYearOverYear,omitempty"`         // 城市环比增长(%)
	CityAccumulative     float64 `protobuf:"fixed64,10,opt,name=cityAccumulative,proto3" json:"cityAccumulative,omitempty"`        // 城市累计
	Rural                float64 `protobuf:"fixed64,11,opt,name=rural,proto3" json:"rural,omitempty"`                              // 农村当月
	RuralYearOnYear      float64 `protobuf:"fixed64,12,opt,name=ruralYearOnYear,proto3" json:"ruralYearOnYear,omitempty"`          // 农村同比增加(%)
	RuralYearOverYear    float64 `protobuf:"fixed64,13,opt,name=ruralYearOverYear,proto3" json:"ruralYearOverYear,omitempty"`      // 农村环比增长(%)
	RuralAccumulative    float64 `protobuf:"fixed64,14,opt,name=ruralAccumulative,proto3" json:"ruralAccumulative,omitempty"`      // 农村累计
}

func (x *Cpi) Reset() {
	*x = Cpi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cpi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cpi) ProtoMessage() {}

func (x *Cpi) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cpi.ProtoReflect.Descriptor instead.
func (*Cpi) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{12}
}

func (x *Cpi) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Cpi) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Cpi) GetNational() float64 {
	if x != nil {
		return x.National
	}
	return 0
}

func (x *Cpi) GetNationalYearOnYear() float64 {
	if x != nil {
		return x.NationalYearOnYear
	}
	return 0
}

func (x *Cpi) GetNationalYearOverYear() float64 {
	if x != nil {
		return x.NationalYearOverYear
	}
	return 0
}

func (x *Cpi) GetNationalAccumulative() float64 {
	if x != nil {
		return x.NationalAccumulative
	}
	return 0
}

func (x *Cpi) GetCity() float64 {
	if x != nil {
		return x.City
	}
	return 0
}

func (x *Cpi) GetCityYearOnYear() float64 {
	if x != nil {
		return x.CityYearOnYear
	}
	return 0
}

func (x *Cpi) GetCityYearOverYear() float64 {
	if x != nil {
		return x.CityYearOverYear
	}
	return 0
}

func (x *Cpi) GetCityAccumulative() float64 {
	if x != nil {
		return x.CityAccumulative
	}
	return 0
}

func (x *Cpi) GetRural() float64 {
	if x != nil {
		return x.Rural
	}
	return 0
}

func (x *Cpi) GetRuralYearOnYear() float64 {
	if x != nil {
		return x.RuralYearOnYear
	}
	return 0
}

func (x *Cpi) GetRuralYearOverYear() float64 {
	if x != nil {
		return x.RuralYearOverYear
	}
	return 0
}

func (x *Cpi) GetRuralAccumulative() float64 {
	if x != nil {
		return x.RuralAccumulative
	}
	return 0
}

// 中美国债
type BondZhUsRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BondZhUsRate `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BondZhUsRateResponse) Reset() {
	*x = BondZhUsRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondZhUsRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondZhUsRateResponse) ProtoMessage() {}

func (x *BondZhUsRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondZhUsRateResponse.ProtoReflect.Descriptor instead.
func (*BondZhUsRateResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{13}
}

func (x *BondZhUsRateResponse) GetResults() []*BondZhUsRate {
	if x != nil {
		return x.Results
	}
	return nil
}

type BondZhUsRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	CN2Years    float64 `protobuf:"fixed64,2,opt,name=cN2Years,proto3" json:"cN2Years,omitempty"`                        //中国国债收益率2年
	CN5Years    float64 `protobuf:"fixed64,3,opt,name=cN5Years,proto3" json:"cN5Years,omitempty"`                        //中国国债收益率5年
	CN10Years   float64 `protobuf:"fixed64,4,opt,name=cN10Years,proto3" json:"cN10Years,omitempty"`                      //中国国债收益率10年
	CN30Years   float64 `protobuf:"fixed64,5,opt,name=cN30Years,proto3" json:"cN30Years,omitempty"`                      //中国国债收益率30年
	CN10_2Years float64 `protobuf:"fixed64,6,opt,name=cN10_2Years,json=cN102Years,proto3" json:"cN10_2Years,omitempty"`  //中国国债收益率10年-2年
	US2Years    float64 `protobuf:"fixed64,7,opt,name=uS2Years,proto3" json:"uS2Years,omitempty"`                        //美国国债收益率2年
	US5Years    float64 `protobuf:"fixed64,8,opt,name=uS5Years,proto3" json:"uS5Years,omitempty"`                        //美国国债收益率5年
	US10Years   float64 `protobuf:"fixed64,9,opt,name=uS10Years,proto3" json:"uS10Years,omitempty"`                      //美国国债收益率10年
	US30Years   float64 `protobuf:"fixed64,10,opt,name=uS30Years,proto3" json:"uS30Years,omitempty"`                     //美国国债收益率30年
	US10_2Years float64 `protobuf:"fixed64,11,opt,name=uS10_2Years,json=uS102Years,proto3" json:"uS10_2Years,omitempty"` //美国国债收益率10年-2年
}

func (x *BondZhUsRate) Reset() {
	*x = BondZhUsRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondZhUsRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondZhUsRate) ProtoMessage() {}

func (x *BondZhUsRate) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondZhUsRate.ProtoReflect.Descriptor instead.
func (*BondZhUsRate) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{14}
}

func (x *BondZhUsRate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *BondZhUsRate) GetCN2Years() float64 {
	if x != nil {
		return x.CN2Years
	}
	return 0
}

func (x *BondZhUsRate) GetCN5Years() float64 {
	if x != nil {
		return x.CN5Years
	}
	return 0
}

func (x *BondZhUsRate) GetCN10Years() float64 {
	if x != nil {
		return x.CN10Years
	}
	return 0
}

func (x *BondZhUsRate) GetCN30Years() float64 {
	if x != nil {
		return x.CN30Years
	}
	return 0
}

func (x *BondZhUsRate) GetCN10_2Years() float64 {
	if x != nil {
		return x.CN10_2Years
	}
	return 0
}

func (x *BondZhUsRate) GetUS2Years() float64 {
	if x != nil {
		return x.US2Years
	}
	return 0
}

func (x *BondZhUsRate) GetUS5Years() float64 {
	if x != nil {
		return x.US5Years
	}
	return 0
}

func (x *BondZhUsRate) GetUS10Years() float64 {
	if x != nil {
		return x.US10Years
	}
	return 0
}

func (x *BondZhUsRate) GetUS30Years() float64 {
	if x != nil {
		return x.US30Years
	}
	return 0
}

func (x *BondZhUsRate) GetUS10_2Years() float64 {
	if x != nil {
		return x.US10_2Years
	}
	return 0
}

type SocialFinancingFlowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SocialFinancingFlow `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SocialFinancingFlowsResponse) Reset() {
	*x = SocialFinancingFlowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialFinancingFlowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialFinancingFlowsResponse) ProtoMessage() {}

func (x *SocialFinancingFlowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialFinancingFlowsResponse.ProtoReflect.Descriptor instead.
func (*SocialFinancingFlowsResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{15}
}

func (x *SocialFinancingFlowsResponse) GetResults() []*SocialFinancingFlow {
	if x != nil {
		return x.Results
	}
	return nil
}

// 中国社会融资规模增量
type SocialFinancingFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Ndbab       float32 `protobuf:"fixed32,2,opt,name=ndbab,proto3" json:"ndbab,omitempty"`             //其中-未贴现银行承兑汇票
	Entrustloan float32 `protobuf:"fixed32,3,opt,name=entrustloan,proto3" json:"entrustloan,omitempty"` //其中-委托贷款
	Forcloan    float32 `protobuf:"fixed32,4,opt,name=forcloan,proto3" json:"forcloan,omitempty"`       //其中-委托贷款外币(折合人民币)
	Rmblaon     float32 `protobuf:"fixed32,5,opt,name=rmblaon,proto3" json:"rmblaon,omitempty"`         //其中-人民币贷款
	Bibae       float32 `protobuf:"fixed32,6,opt,name=bibae,proto3" json:"bibae,omitempty"`             //其中-企业债券
	Tiosfs      float32 `protobuf:"fixed32,7,opt,name=tiosfs,proto3" json:"tiosfs,omitempty"`           //社会融资规模增量(亿元)
	Sfinfe      float32 `protobuf:"fixed32,8,opt,name=sfinfe,proto3" json:"sfinfe,omitempty"`           //其中-非金融企业境内股票融资
	Trustloan   float32 `protobuf:"fixed32,9,opt,name=trustloan,proto3" json:"trustloan,omitempty"`     //其中-信托贷款
}

func (x *SocialFinancingFlow) Reset() {
	*x = SocialFinancingFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialFinancingFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialFinancingFlow) ProtoMessage() {}

func (x *SocialFinancingFlow) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialFinancingFlow.ProtoReflect.Descriptor instead.
func (*SocialFinancingFlow) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{16}
}

func (x *SocialFinancingFlow) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SocialFinancingFlow) GetNdbab() float32 {
	if x != nil {
		return x.Ndbab
	}
	return 0
}

func (x *SocialFinancingFlow) GetEntrustloan() float32 {
	if x != nil {
		return x.Entrustloan
	}
	return 0
}

func (x *SocialFinancingFlow) GetForcloan() float32 {
	if x != nil {
		return x.Forcloan
	}
	return 0
}

func (x *SocialFinancingFlow) GetRmblaon() float32 {
	if x != nil {
		return x.Rmblaon
	}
	return 0
}

func (x *SocialFinancingFlow) GetBibae() float32 {
	if x != nil {
		return x.Bibae
	}
	return 0
}

func (x *SocialFinancingFlow) GetTiosfs() float32 {
	if x != nil {
		return x.Tiosfs
	}
	return 0
}

func (x *SocialFinancingFlow) GetSfinfe() float32 {
	if x != nil {
		return x.Sfinfe
	}
	return 0
}

func (x *SocialFinancingFlow) GetTrustloan() float32 {
	if x != nil {
		return x.Trustloan
	}
	return 0
}

type SH300PEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SH300PE `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SH300PEResponse) Reset() {
	*x = SH300PEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SH300PEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SH300PEResponse) ProtoMessage() {}

func (x *SH300PEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SH300PEResponse.ProtoReflect.Descriptor instead.
func (*SH300PEResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{17}
}

func (x *SH300PEResponse) GetResults() []*SH300PE {
	if x != nil {
		return x.Results
	}
	return nil
}

type SH300PE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        float64 `protobuf:"fixed64,1,opt,name=date,proto3" json:"date,omitempty"` // 时间
	Time        string  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	MiddleLyrPe float64 `protobuf:"fixed64,3,opt,name=middleLyrPe,proto3" json:"middleLyrPe,omitempty"` //沪深300静态市盈率中位数
	LyrPe       float64 `protobuf:"fixed64,4,opt,name=lyrPe,proto3" json:"lyrPe,omitempty"`             //沪深300静态市盈率等权平均
	AddLyrPe    float64 `protobuf:"fixed64,5,opt,name=addLyrPe,proto3" json:"addLyrPe,omitempty"`       //沪深300静态市盈率
	MiddleTtmPe float64 `protobuf:"fixed64,6,opt,name=middleTtmPe,proto3" json:"middleTtmPe,omitempty"` //沪深300滚动市盈率(TTM)中位数
	TtmPe       float64 `protobuf:"fixed64,7,opt,name=ttmPe,proto3" json:"ttmPe,omitempty"`             //沪深300滚动市盈率(TTM)等权平均
	AddTtmPe    float64 `protobuf:"fixed64,8,opt,name=addTtmPe,proto3" json:"addTtmPe,omitempty"`       //沪深300滚动市盈率(TTM)
}

func (x *SH300PE) Reset() {
	*x = SH300PE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SH300PE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SH300PE) ProtoMessage() {}

func (x *SH300PE) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SH300PE.ProtoReflect.Descriptor instead.
func (*SH300PE) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{18}
}

func (x *SH300PE) GetDate() float64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *SH300PE) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *SH300PE) GetMiddleLyrPe() float64 {
	if x != nil {
		return x.MiddleLyrPe
	}
	return 0
}

func (x *SH300PE) GetLyrPe() float64 {
	if x != nil {
		return x.LyrPe
	}
	return 0
}

func (x *SH300PE) GetAddLyrPe() float64 {
	if x != nil {
		return x.AddLyrPe
	}
	return 0
}

func (x *SH300PE) GetMiddleTtmPe() float64 {
	if x != nil {
		return x.MiddleTtmPe
	}
	return 0
}

func (x *SH300PE) GetTtmPe() float64 {
	if x != nil {
		return x.TtmPe
	}
	return 0
}

func (x *SH300PE) GetAddTtmPe() float64 {
	if x != nil {
		return x.AddTtmPe
	}
	return 0
}

type MoneySupplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*MoneySupply `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *MoneySupplyResponse) Reset() {
	*x = MoneySupplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneySupplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneySupplyResponse) ProtoMessage() {}

func (x *MoneySupplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneySupplyResponse.ProtoReflect.Descriptor instead.
func (*MoneySupplyResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{19}
}

func (x *MoneySupplyResponse) GetResults() []*MoneySupply {
	if x != nil {
		return x.Results
	}
	return nil
}

type MoneySupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date           string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	M2             float64 `protobuf:"fixed64,2,opt,name=m2,proto3" json:"m2,omitempty"`                          //货币和准货币(M2)数量(亿元)
	M2YearOnYear   float64 `protobuf:"fixed64,3,opt,name=m2YearOnYear,proto3" json:"m2YearOnYear,omitempty"`      //货币和准货币(M2)同比增长 / %
	M2YearOverYear float64 `protobuf:"fixed64,4,opt,name=m2YearOverYear,proto3" json:"m2YearOverYear,omitempty"`  //货币和准货币(M2)环比增长/ %
	M1             float64 `protobuf:"fixed64,5,opt,name=m1,proto3" json:"m1,omitempty"`                          //货币(M1)数量(亿元)
	M1YearOnYear   float64 `protobuf:"fixed64,6,opt,name=m1YearOnYear,proto3" json:"m1YearOnYear,omitempty"`      //货币(M1)同比增长/ %
	M1YearOverYear float64 `protobuf:"fixed64,7,opt,name=m1YearOverYear,proto3" json:"m1YearOverYear,omitempty"`  //货币(M1)环比增长/ %
	M0             float64 `protobuf:"fixed64,8,opt,name=m0,proto3" json:"m0,omitempty"`                          //流通中的现金(M0)数量(亿元)
	M0YearOnYear   float64 `protobuf:"fixed64,9,opt,name=m0YearOnYear,proto3" json:"m0YearOnYear,omitempty"`      //流通中的现金(M0)同比增长/ %
	M0YearOverYear float64 `protobuf:"fixed64,10,opt,name=m0YearOverYear,proto3" json:"m0YearOverYear,omitempty"` //流通中的现金(M0)环比增长/ %
}

func (x *MoneySupply) Reset() {
	*x = MoneySupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneySupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneySupply) ProtoMessage() {}

func (x *MoneySupply) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneySupply.ProtoReflect.Descriptor instead.
func (*MoneySupply) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{20}
}

func (x *MoneySupply) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MoneySupply) GetM2() float64 {
	if x != nil {
		return x.M2
	}
	return 0
}

func (x *MoneySupply) GetM2YearOnYear() float64 {
	if x != nil {
		return x.M2YearOnYear
	}
	return 0
}

func (x *MoneySupply) GetM2YearOverYear() float64 {
	if x != nil {
		return x.M2YearOverYear
	}
	return 0
}

func (x *MoneySupply) GetM1() float64 {
	if x != nil {
		return x.M1
	}
	return 0
}

func (x *MoneySupply) GetM1YearOnYear() float64 {
	if x != nil {
		return x.M1YearOnYear
	}
	return 0
}

func (x *MoneySupply) GetM1YearOverYear() float64 {
	if x != nil {
		return x.M1YearOverYear
	}
	return 0
}

func (x *MoneySupply) GetM0() float64 {
	if x != nil {
		return x.M0
	}
	return 0
}

func (x *MoneySupply) GetM0YearOnYear() float64 {
	if x != nil {
		return x.M0YearOnYear
	}
	return 0
}

func (x *MoneySupply) GetM0YearOverYear() float64 {
	if x != nil {
		return x.M0YearOverYear
	}
	return 0
}

type ConsumerGoodsRetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ConsumerGoodsRetail `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ConsumerGoodsRetailResponse) Reset() {
	*x = ConsumerGoodsRetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerGoodsRetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerGoodsRetailResponse) ProtoMessage() {}

func (x *ConsumerGoodsRetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerGoodsRetailResponse.ProtoReflect.Descriptor instead.
func (*ConsumerGoodsRetailResponse) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{21}
}

func (x *ConsumerGoodsRetailResponse) GetResults() []*ConsumerGoodsRetail {
	if x != nil {
		return x.Results
	}
	return nil
}

type ConsumerGoodsRetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                        string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalRetailSales            float64 `protobuf:"fixed64,2,opt,name=totalRetailSales,proto3" json:"totalRetailSales,omitempty"`                       // 社会消费品零售总额(亿元)
	YearOnYear                  float64 `protobuf:"fixed64,3,opt,name=yearOnYear,proto3" json:"yearOnYear,omitempty"`                                   // 同比增长/ %
	YearOverYear                float64 `protobuf:"fixed64,4,opt,name=yearOverYear,proto3" json:"yearOverYear,omitempty"`                               // 环比增长/ %
	TotalAccumulation           float64 `protobuf:"fixed64,5,opt,name=totalAccumulation,proto3" json:"totalAccumulation,omitempty"`                     // 累计/ %
	TotalAccumulationYearOnYear float64 `protobuf:"fixed64,6,opt,name=totalAccumulationYearOnYear,proto3" json:"totalAccumulationYearOnYear,omitempty"` // 累计同比增长/ %
}

func (x *ConsumerGoodsRetail) Reset() {
	*x = ConsumerGoodsRetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerGoodsRetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerGoodsRetail) ProtoMessage() {}

func (x *ConsumerGoodsRetail) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerGoodsRetail.ProtoReflect.Descriptor instead.
func (*ConsumerGoodsRetail) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{22}
}

func (x *ConsumerGoodsRetail) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ConsumerGoodsRetail) GetTotalRetailSales() float64 {
	if x != nil {
		return x.TotalRetailSales
	}
	return 0
}

func (x *ConsumerGoodsRetail) GetYearOnYear() float64 {
	if x != nil {
		return x.YearOnYear
	}
	return 0
}

func (x *ConsumerGoodsRetail) GetYearOverYear() float64 {
	if x != nil {
		return x.YearOverYear
	}
	return 0
}

func (x *ConsumerGoodsRetail) GetTotalAccumulation() float64 {
	if x != nil {
		return x.TotalAccumulation
	}
	return 0
}

func (x *ConsumerGoodsRetail) GetTotalAccumulationYearOnYear() float64 {
	if x != nil {
		return x.TotalAccumulationYearOnYear
	}
	return 0
}

var File_server_server_proto protoreflect.FileDescriptor

var file_server_server_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x14, 0x46, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x46, 0x6f, 0x65, 0x77, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x56, 0x0a, 0x1c, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xc8, 0x07, 0x0a, 0x14, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x64, 0x62, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x64,
	0x62, 0x61, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x6f,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x61,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6d, 0x62, 0x6c, 0x61, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6d, 0x62, 0x6c, 0x61, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x69, 0x62, 0x61, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x62, 0x61,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6f, 0x73, 0x66, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x6f, 0x73, 0x66, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x66, 0x69,
	0x6e, 0x66, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x66, 0x69, 0x6e, 0x66,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x4f, 0x66, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x6e, 0x64, 0x62, 0x61, 0x62, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x64, 0x62, 0x61, 0x62, 0x67, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x6c, 0x6f, 0x61, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x61, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63,
	0x6c, 0x6f, 0x61, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x72, 0x6d, 0x62, 0x6c, 0x61, 0x6f, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6d, 0x62, 0x6c, 0x61,
	0x6f, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x62, 0x69, 0x62, 0x61, 0x65, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x62, 0x61, 0x65, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6f, 0x73, 0x66, 0x73,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x69, 0x6f, 0x73, 0x66, 0x73, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x66, 0x69, 0x6e, 0x66, 0x65, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x66,
	0x69, 0x6e, 0x66, 0x65, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x21, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x67, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f,
	0x66, 0x66, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1a,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64,
	0x73, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x72, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x46,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x65, 0x77, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x65, 0x77, 0x69, 0x67, 0x6e, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x46, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x46, 0x6f, 0x65, 0x77, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0b, 0x50, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x70, 0x69, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x83, 0x01, 0x0a, 0x03, 0x50, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x70,
	0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x34, 0x0a, 0x0b, 0x47, 0x64, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x64, 0x70, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x03,
	0x47, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x64, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x64, 0x70, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x64, 0x70, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74,
	0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12,
	0x3e, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x22,
	0x34, 0x0a, 0x0b, 0x50, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x69, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x03, 0x50, 0x6d, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72,
	0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x4f,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x22, 0x34, 0x0a, 0x0b, 0x43, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x70, 0x69, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x91, 0x04, 0x0a, 0x03, 0x43, 0x70, 0x69, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x69, 0x74, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x69, 0x74, 0x79, 0x59, 0x65, 0x61,
	0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x69, 0x74, 0x79, 0x59,
	0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x63, 0x69, 0x74, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x75, 0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x72, 0x75, 0x72, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x75, 0x72, 0x61, 0x6c, 0x59, 0x65,
	0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x72, 0x75, 0x72, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x72, 0x75, 0x72, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x75, 0x72, 0x61,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x75, 0x72, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x75, 0x72, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x42,
	0x6f, 0x6e, 0x64, 0x5a, 0x68, 0x55, 0x73, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6e, 0x64, 0x5a, 0x68, 0x55, 0x73, 0x52, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x0c, 0x42, 0x6f, 0x6e, 0x64, 0x5a, 0x68, 0x55, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x4e, 0x32, 0x59,
	0x65, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x4e, 0x32, 0x59,
	0x65, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x4e, 0x35, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x4e, 0x35, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x4e, 0x31, 0x30, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x4e, 0x31, 0x30, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x4e, 0x33, 0x30, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x63, 0x4e, 0x33, 0x30, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x4e, 0x31, 0x30, 0x5f, 0x32, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x63, 0x4e, 0x31, 0x30, 0x32, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x53, 0x32, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x75, 0x53, 0x32, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x53, 0x35,
	0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x53, 0x35,
	0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x53, 0x31, 0x30, 0x59, 0x65, 0x61,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x53, 0x31, 0x30, 0x59, 0x65,
	0x61, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x53, 0x33, 0x30, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x53, 0x33, 0x30, 0x59, 0x65, 0x61, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x53, 0x31, 0x30, 0x5f, 0x32, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x53, 0x31, 0x30, 0x32, 0x59, 0x65, 0x61,
	0x72, 0x73, 0x22, 0x55, 0x0a, 0x1c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x64, 0x62, 0x61, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6e, 0x64, 0x62, 0x61, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6d, 0x62,
	0x6c, 0x61, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x6d, 0x62, 0x6c,
	0x61, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x62, 0x61, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x62, 0x69, 0x62, 0x61, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6f,
	0x73, 0x66, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x69, 0x6f, 0x73, 0x66,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x66, 0x69, 0x6e, 0x66, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x73, 0x66, 0x69, 0x6e, 0x66, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x6e, 0x22, 0x3c, 0x0a, 0x0f, 0x53, 0x48, 0x33, 0x30, 0x30,
	0x50, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x48, 0x33, 0x30, 0x30, 0x50, 0x45, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x07, 0x53, 0x48, 0x33, 0x30, 0x30, 0x50,
	0x45, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4c, 0x79, 0x72, 0x50, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x79, 0x72, 0x50, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x79, 0x72, 0x50, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x79, 0x72, 0x50,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x4c, 0x79, 0x72, 0x50, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x4c, 0x79, 0x72, 0x50, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x54, 0x74, 0x6d, 0x50, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x54, 0x74, 0x6d, 0x50, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x74, 0x6d, 0x50, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x74, 0x74, 0x6d, 0x50, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x54, 0x74, 0x6d, 0x50,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x54, 0x74, 0x6d, 0x50,
	0x65, 0x22, 0x44, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6d,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x32, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6d, 0x32, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x32, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x32, 0x59, 0x65, 0x61, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x31, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x31, 0x59, 0x65, 0x61,
	0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d,
	0x31, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x31, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x31, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x6d, 0x30, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x30, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x30, 0x59, 0x65, 0x61,
	0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x30, 0x59, 0x65, 0x61,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x6d, 0x30, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x22,
	0x54, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x32, 0xcc, 0x09, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x48, 0x33, 0x30, 0x30, 0x50, 0x45, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x48, 0x33,
	0x30, 0x30, 0x50, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73,
	0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x73, 0x68, 0x33, 0x30, 0x30, 0x70, 0x65, 0x12, 0x70, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x5a, 0x68, 0x55, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x5a, 0x68, 0x55, 0x73, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f,
	0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x7a, 0x68, 0x5f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63,
	0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x8b, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x65, 0x77, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x65, 0x77, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x7d, 0x12, 0x55, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x50, 0x70, 0x69, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x63, 0x6e,
	0x2f, 0x70, 0x70, 0x69, 0x12, 0x55, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x47, 0x64, 0x70, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x64, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63,
	0x6f, 0x70, 0x69, 0x63, 0x2f, 0x63, 0x6e, 0x2f, 0x67, 0x64, 0x70, 0x12, 0x55, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x50, 0x6d, 0x69, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x63, 0x6e, 0x2f, 0x70,
	0x6d, 0x69, 0x12, 0x55, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x70, 0x69, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70,
	0x69, 0x63, 0x2f, 0x63, 0x6e, 0x2f, 0x63, 0x70, 0x69, 0x12, 0x6e, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61,
	0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x63, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x47, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x65, 0x6e, 0x68, 0x61, 0x6f, 0x6e, 0x61, 0x6e, 0x2d, 0x65, 0x74, 0x68, 0x2f, 0x64, 0x61,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x92, 0x41,
	0x18, 0x12, 0x13, 0x0a, 0x0b, 0x44, 0x61, 0x6f, 0x20, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x32, 0x04, 0x56, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_server_server_proto_rawDescOnce sync.Once
	file_server_server_proto_rawDescData = file_server_server_proto_rawDesc
)

func file_server_server_proto_rawDescGZIP() []byte {
	file_server_server_proto_rawDescOnce.Do(func() {
		file_server_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_server_proto_rawDescData)
	})
	return file_server_server_proto_rawDescData
}

var file_server_server_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_server_server_proto_goTypes = []interface{}{
	(*FturesFoewignRequest)(nil),         // 0: server.FturesFoewignRequest
	(*SocialFinancingStockResponse)(nil), // 1: server.SocialFinancingStockResponse
	(*SocialFinancingStock)(nil),         // 2: server.SocialFinancingStock
	(*FturesFoewignResponse)(nil),        // 3: server.FturesFoewignResponse
	(*FturesFoewign)(nil),                // 4: server.FturesFoewign
	(*PpiResponse)(nil),                  // 5: server.PpiResponse
	(*Ppi)(nil),                          // 6: server.Ppi
	(*GdpResponse)(nil),                  // 7: server.GdpResponse
	(*Gdp)(nil),                          // 8: server.Gdp
	(*PmiResponse)(nil),                  // 9: server.PmiResponse
	(*Pmi)(nil),                          // 10: server.Pmi
	(*CpiResponse)(nil),                  // 11: server.CpiResponse
	(*Cpi)(nil),                          // 12: server.Cpi
	(*BondZhUsRateResponse)(nil),         // 13: server.BondZhUsRateResponse
	(*BondZhUsRate)(nil),                 // 14: server.BondZhUsRate
	(*SocialFinancingFlowsResponse)(nil), // 15: server.SocialFinancingFlowsResponse
	(*SocialFinancingFlow)(nil),          // 16: server.SocialFinancingFlow
	(*SH300PEResponse)(nil),              // 17: server.SH300PEResponse
	(*SH300PE)(nil),                      // 18: server.SH300PE
	(*MoneySupplyResponse)(nil),          // 19: server.MoneySupplyResponse
	(*MoneySupply)(nil),                  // 20: server.MoneySupply
	(*ConsumerGoodsRetailResponse)(nil),  // 21: server.ConsumerGoodsRetailResponse
	(*ConsumerGoodsRetail)(nil),          // 22: server.ConsumerGoodsRetail
	(*emptypb.Empty)(nil),                // 23: google.protobuf.Empty
}
var file_server_server_proto_depIdxs = []int32{
	2,  // 0: server.SocialFinancingStockResponse.results:type_name -> server.SocialFinancingStock
	4,  // 1: server.FturesFoewignResponse.results:type_name -> server.FturesFoewign
	6,  // 2: server.PpiResponse.results:type_name -> server.Ppi
	8,  // 3: server.GdpResponse.results:type_name -> server.Gdp
	10, // 4: server.PmiResponse.results:type_name -> server.Pmi
	12, // 5: server.CpiResponse.results:type_name -> server.Cpi
	14, // 6: server.BondZhUsRateResponse.results:type_name -> server.BondZhUsRate
	16, // 7: server.SocialFinancingFlowsResponse.results:type_name -> server.SocialFinancingFlow
	18, // 8: server.SH300PEResponse.results:type_name -> server.SH300PE
	20, // 9: server.MoneySupplyResponse.results:type_name -> server.MoneySupply
	22, // 10: server.ConsumerGoodsRetailResponse.results:type_name -> server.ConsumerGoodsRetail
	23, // 11: server.Greeter.GetSH300PE:input_type -> google.protobuf.Empty
	23, // 12: server.Greeter.GetBondZhUsRate:input_type -> google.protobuf.Empty
	23, // 13: server.Greeter.GetTotalSocialFlows:input_type -> google.protobuf.Empty
	23, // 14: server.Greeter.GetSocialFinancingStock:input_type -> google.protobuf.Empty
	0,  // 15: server.Greeter.GetFuturesForeignHist:input_type -> server.FturesFoewignRequest
	23, // 16: server.Greeter.GetPpi:input_type -> google.protobuf.Empty
	23, // 17: server.Greeter.GetGdp:input_type -> google.protobuf.Empty
	23, // 18: server.Greeter.GetPmi:input_type -> google.protobuf.Empty
	23, // 19: server.Greeter.GetCpi:input_type -> google.protobuf.Empty
	23, // 20: server.Greeter.GetMoneySupply:input_type -> google.protobuf.Empty
	23, // 21: server.Greeter.GetConsumerGoodsRetail:input_type -> google.protobuf.Empty
	17, // 22: server.Greeter.GetSH300PE:output_type -> server.SH300PEResponse
	13, // 23: server.Greeter.GetBondZhUsRate:output_type -> server.BondZhUsRateResponse
	15, // 24: server.Greeter.GetTotalSocialFlows:output_type -> server.SocialFinancingFlowsResponse
	1,  // 25: server.Greeter.GetSocialFinancingStock:output_type -> server.SocialFinancingStockResponse
	3,  // 26: server.Greeter.GetFuturesForeignHist:output_type -> server.FturesFoewignResponse
	5,  // 27: server.Greeter.GetPpi:output_type -> server.PpiResponse
	7,  // 28: server.Greeter.GetGdp:output_type -> server.GdpResponse
	9,  // 29: server.Greeter.GetPmi:output_type -> server.PmiResponse
	11, // 30: server.Greeter.GetCpi:output_type -> server.CpiResponse
	19, // 31: server.Greeter.GetMoneySupply:output_type -> server.MoneySupplyResponse
	21, // 32: server.Greeter.GetConsumerGoodsRetail:output_type -> server.ConsumerGoodsRetailResponse
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_server_server_proto_init() }
func file_server_server_proto_init() {
	if File_server_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FturesFoewignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialFinancingStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialFinancingStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FturesFoewignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FturesFoewign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ppi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GdpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gdp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pmi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cpi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondZhUsRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondZhUsRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialFinancingFlowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialFinancingFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SH300PEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SH300PE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneySupplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneySupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerGoodsRetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerGoodsRetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_server_proto_goTypes,
		DependencyIndexes: file_server_server_proto_depIdxs,
		MessageInfos:      file_server_server_proto_msgTypes,
	}.Build()
	File_server_server_proto = out.File
	file_server_server_proto_rawDesc = nil
	file_server_server_proto_goTypes = nil
	file_server_server_proto_depIdxs = nil
}
