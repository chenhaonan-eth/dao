// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCentralBankMonetaryAuthorityAssetsAndLiabilities(db *gorm.DB, opts ...gen.DOOption) centralBankMonetaryAuthorityAssetsAndLiabilities {
	_centralBankMonetaryAuthorityAssetsAndLiabilities := centralBankMonetaryAuthorityAssetsAndLiabilities{}

	_centralBankMonetaryAuthorityAssetsAndLiabilities.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.UseDB(db, opts...)
	_centralBankMonetaryAuthorityAssetsAndLiabilities.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.UseModel(&model.CentralBankMonetaryAuthorityAssetsAndLiabilities{})

	tableName := _centralBankMonetaryAuthorityAssetsAndLiabilities.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.TableName()
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ALL = field.NewAsterisk(tableName)
	_centralBankMonetaryAuthorityAssetsAndLiabilities.Date = field.NewString(tableName, "date")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ExternalAssets = field.NewString(tableName, "external_assets")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.Forex = field.NewString(tableName, "forex")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.MonetaryGold = field.NewString(tableName, "monetary_gold")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.OtherForeignAssets = field.NewString(tableName, "other_foreign_assets")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ClaimOnTheGovernment = field.NewString(tableName, "claim_on_the_government")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.TheCentralGovernment = field.NewString(tableName, "the_central_government")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ClaimsOnOtherDepositoryCompanies = field.NewString(tableName, "claims_on_other_depository_companies")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ClaimsOnOtherFinancialCompanies = field.NewString(tableName, "claims_on_other_financial_companies")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ClaimsOnNonMonetaryFinancialInstitutions = field.NewString(tableName, "claims_on_non_monetary_financial_institutions")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ClaimsOnNonFinancialCorporations = field.NewString(tableName, "claims_on_non_financial_corporations")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.AllOtherAssets = field.NewString(tableName, "all_other_assets")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.TotalAssets = field.NewString(tableName, "total_assets")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ReserveCurrency = field.NewString(tableName, "reserve_currency")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.IssueCurrency = field.NewString(tableName, "issue_currency")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.FinancialCompanyDeposits = field.NewString(tableName, "financial_company_deposits")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.OtherDepositoryCompanies = field.NewString(tableName, "other_depository_companies")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.OtherFinancialCompanies = field.NewString(tableName, "other_financial_companies")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.LiabilitiesToFinancialInstitutions = field.NewString(tableName, "liabilities_to_financial_institutions")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ReserveDeposit = field.NewString(tableName, "reserve_deposit")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.NonFinancialCorporateDeposits = field.NewString(tableName, "non_financial_corporate_deposits")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.CurrentDeposit = field.NewString(tableName, "current_deposit")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.Bond = field.NewString(tableName, "bond")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.ForeignLiabilities = field.NewString(tableName, "foreign_liabilities")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.PublicDeposit = field.NewString(tableName, "public_deposit")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.EquityFund = field.NewString(tableName, "equity_fund")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.OtherLiabilities = field.NewString(tableName, "other_liabilities")
	_centralBankMonetaryAuthorityAssetsAndLiabilities.GrossLiability = field.NewString(tableName, "gross_liability")

	_centralBankMonetaryAuthorityAssetsAndLiabilities.fillFieldMap()

	return _centralBankMonetaryAuthorityAssetsAndLiabilities
}

type centralBankMonetaryAuthorityAssetsAndLiabilities struct {
	centralBankMonetaryAuthorityAssetsAndLiabilitiesDo centralBankMonetaryAuthorityAssetsAndLiabilitiesDo

	ALL                                      field.Asterisk
	Date                                     field.String
	ExternalAssets                           field.String
	Forex                                    field.String
	MonetaryGold                             field.String
	OtherForeignAssets                       field.String
	ClaimOnTheGovernment                     field.String
	TheCentralGovernment                     field.String
	ClaimsOnOtherDepositoryCompanies         field.String
	ClaimsOnOtherFinancialCompanies          field.String
	ClaimsOnNonMonetaryFinancialInstitutions field.String
	ClaimsOnNonFinancialCorporations         field.String
	AllOtherAssets                           field.String
	TotalAssets                              field.String
	ReserveCurrency                          field.String
	IssueCurrency                            field.String
	FinancialCompanyDeposits                 field.String
	OtherDepositoryCompanies                 field.String
	OtherFinancialCompanies                  field.String
	LiabilitiesToFinancialInstitutions       field.String
	ReserveDeposit                           field.String
	NonFinancialCorporateDeposits            field.String
	CurrentDeposit                           field.String
	Bond                                     field.String
	ForeignLiabilities                       field.String
	PublicDeposit                            field.String
	EquityFund                               field.String
	OtherLiabilities                         field.String
	GrossLiability                           field.String

	fieldMap map[string]field.Expr
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilities) Table(newTableName string) *centralBankMonetaryAuthorityAssetsAndLiabilities {
	c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilities) As(alias string) *centralBankMonetaryAuthorityAssetsAndLiabilities {
	c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.DO = *(c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *centralBankMonetaryAuthorityAssetsAndLiabilities) updateTableName(table string) *centralBankMonetaryAuthorityAssetsAndLiabilities {
	c.ALL = field.NewAsterisk(table)
	c.Date = field.NewString(table, "date")
	c.ExternalAssets = field.NewString(table, "external_assets")
	c.Forex = field.NewString(table, "forex")
	c.MonetaryGold = field.NewString(table, "monetary_gold")
	c.OtherForeignAssets = field.NewString(table, "other_foreign_assets")
	c.ClaimOnTheGovernment = field.NewString(table, "claim_on_the_government")
	c.TheCentralGovernment = field.NewString(table, "the_central_government")
	c.ClaimsOnOtherDepositoryCompanies = field.NewString(table, "claims_on_other_depository_companies")
	c.ClaimsOnOtherFinancialCompanies = field.NewString(table, "claims_on_other_financial_companies")
	c.ClaimsOnNonMonetaryFinancialInstitutions = field.NewString(table, "claims_on_non_monetary_financial_institutions")
	c.ClaimsOnNonFinancialCorporations = field.NewString(table, "claims_on_non_financial_corporations")
	c.AllOtherAssets = field.NewString(table, "all_other_assets")
	c.TotalAssets = field.NewString(table, "total_assets")
	c.ReserveCurrency = field.NewString(table, "reserve_currency")
	c.IssueCurrency = field.NewString(table, "issue_currency")
	c.FinancialCompanyDeposits = field.NewString(table, "financial_company_deposits")
	c.OtherDepositoryCompanies = field.NewString(table, "other_depository_companies")
	c.OtherFinancialCompanies = field.NewString(table, "other_financial_companies")
	c.LiabilitiesToFinancialInstitutions = field.NewString(table, "liabilities_to_financial_institutions")
	c.ReserveDeposit = field.NewString(table, "reserve_deposit")
	c.NonFinancialCorporateDeposits = field.NewString(table, "non_financial_corporate_deposits")
	c.CurrentDeposit = field.NewString(table, "current_deposit")
	c.Bond = field.NewString(table, "bond")
	c.ForeignLiabilities = field.NewString(table, "foreign_liabilities")
	c.PublicDeposit = field.NewString(table, "public_deposit")
	c.EquityFund = field.NewString(table, "equity_fund")
	c.OtherLiabilities = field.NewString(table, "other_liabilities")
	c.GrossLiability = field.NewString(table, "gross_liability")

	c.fillFieldMap()

	return c
}

func (c *centralBankMonetaryAuthorityAssetsAndLiabilities) WithContext(ctx context.Context) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.WithContext(ctx)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilities) TableName() string {
	return c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.TableName()
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilities) Alias() string {
	return c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.Alias()
}

func (c *centralBankMonetaryAuthorityAssetsAndLiabilities) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *centralBankMonetaryAuthorityAssetsAndLiabilities) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 28)
	c.fieldMap["date"] = c.Date
	c.fieldMap["external_assets"] = c.ExternalAssets
	c.fieldMap["forex"] = c.Forex
	c.fieldMap["monetary_gold"] = c.MonetaryGold
	c.fieldMap["other_foreign_assets"] = c.OtherForeignAssets
	c.fieldMap["claim_on_the_government"] = c.ClaimOnTheGovernment
	c.fieldMap["the_central_government"] = c.TheCentralGovernment
	c.fieldMap["claims_on_other_depository_companies"] = c.ClaimsOnOtherDepositoryCompanies
	c.fieldMap["claims_on_other_financial_companies"] = c.ClaimsOnOtherFinancialCompanies
	c.fieldMap["claims_on_non_monetary_financial_institutions"] = c.ClaimsOnNonMonetaryFinancialInstitutions
	c.fieldMap["claims_on_non_financial_corporations"] = c.ClaimsOnNonFinancialCorporations
	c.fieldMap["all_other_assets"] = c.AllOtherAssets
	c.fieldMap["total_assets"] = c.TotalAssets
	c.fieldMap["reserve_currency"] = c.ReserveCurrency
	c.fieldMap["issue_currency"] = c.IssueCurrency
	c.fieldMap["financial_company_deposits"] = c.FinancialCompanyDeposits
	c.fieldMap["other_depository_companies"] = c.OtherDepositoryCompanies
	c.fieldMap["other_financial_companies"] = c.OtherFinancialCompanies
	c.fieldMap["liabilities_to_financial_institutions"] = c.LiabilitiesToFinancialInstitutions
	c.fieldMap["reserve_deposit"] = c.ReserveDeposit
	c.fieldMap["non_financial_corporate_deposits"] = c.NonFinancialCorporateDeposits
	c.fieldMap["current_deposit"] = c.CurrentDeposit
	c.fieldMap["bond"] = c.Bond
	c.fieldMap["foreign_liabilities"] = c.ForeignLiabilities
	c.fieldMap["public_deposit"] = c.PublicDeposit
	c.fieldMap["equity_fund"] = c.EquityFund
	c.fieldMap["other_liabilities"] = c.OtherLiabilities
	c.fieldMap["gross_liability"] = c.GrossLiability
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilities) clone(db *gorm.DB) centralBankMonetaryAuthorityAssetsAndLiabilities {
	c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilities) replaceDB(db *gorm.DB) centralBankMonetaryAuthorityAssetsAndLiabilities {
	c.centralBankMonetaryAuthorityAssetsAndLiabilitiesDo.ReplaceDB(db)
	return c
}

type centralBankMonetaryAuthorityAssetsAndLiabilitiesDo struct{ gen.DO }

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Debug() *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Debug())
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) WithContext(ctx context.Context) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) ReadDB() *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.Clauses(dbresolver.Read)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) WriteDB() *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.Clauses(dbresolver.Write)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Session(config *gorm.Session) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Session(config))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Clauses(conds ...clause.Expression) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Returning(value interface{}, columns ...string) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Not(conds ...gen.Condition) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Or(conds ...gen.Condition) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Select(conds ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Where(conds ...gen.Condition) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Order(conds ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Distinct(cols ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Omit(cols ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Join(table schema.Tabler, on ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) RightJoin(table schema.Tabler, on ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Group(cols ...field.Expr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Having(conds ...gen.Condition) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Limit(limit int) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Offset(offset int) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Unscoped() *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Create(values ...*model.CentralBankMonetaryAuthorityAssetsAndLiabilities) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) CreateInBatches(values []*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Save(values ...*model.CentralBankMonetaryAuthorityAssetsAndLiabilities) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) First() (*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CentralBankMonetaryAuthorityAssetsAndLiabilities), nil
	}
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Take() (*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CentralBankMonetaryAuthorityAssetsAndLiabilities), nil
	}
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Last() (*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CentralBankMonetaryAuthorityAssetsAndLiabilities), nil
	}
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Find() ([]*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, error) {
	result, err := c.DO.Find()
	return result.([]*model.CentralBankMonetaryAuthorityAssetsAndLiabilities), err
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, err error) {
	buf := make([]*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) FindInBatches(result *[]*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Attrs(attrs ...field.AssignExpr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Assign(attrs ...field.AssignExpr) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Joins(fields ...field.RelationField) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Preload(fields ...field.RelationField) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) FirstOrInit() (*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CentralBankMonetaryAuthorityAssetsAndLiabilities), nil
	}
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) FirstOrCreate() (*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CentralBankMonetaryAuthorityAssetsAndLiabilities), nil
	}
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) FindByPage(offset int, limit int) (result []*model.CentralBankMonetaryAuthorityAssetsAndLiabilities, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) Delete(models ...*model.CentralBankMonetaryAuthorityAssetsAndLiabilities) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo) withDO(do gen.Dao) *centralBankMonetaryAuthorityAssetsAndLiabilitiesDo {
	c.DO = *do.(*gen.DO)
	return c
}
