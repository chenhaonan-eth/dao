// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newManufacturingPmiParticulars(db *gorm.DB, opts ...gen.DOOption) manufacturingPmiParticulars {
	_manufacturingPmiParticulars := manufacturingPmiParticulars{}

	_manufacturingPmiParticulars.manufacturingPmiParticularsDo.UseDB(db, opts...)
	_manufacturingPmiParticulars.manufacturingPmiParticularsDo.UseModel(&model.ManufacturingPmiParticulars{})

	tableName := _manufacturingPmiParticulars.manufacturingPmiParticularsDo.TableName()
	_manufacturingPmiParticulars.ALL = field.NewAsterisk(tableName)
	_manufacturingPmiParticulars.Date = field.NewString(tableName, "date")
	_manufacturingPmiParticulars.Pmi = field.NewString(tableName, "pmi")
	_manufacturingPmiParticulars.ProductionIndex = field.NewString(tableName, "production_index")
	_manufacturingPmiParticulars.IndexOfNewOrders = field.NewString(tableName, "index_of_new_orders")
	_manufacturingPmiParticulars.IndexOfNewExportOrders = field.NewString(tableName, "index_of_new_export_orders")
	_manufacturingPmiParticulars.BacklogIndex = field.NewString(tableName, "backlog_index")
	_manufacturingPmiParticulars.IndexOfInventoriesOfFinishedGoods = field.NewString(tableName, "index_of_inventories_of_finished_goods")
	_manufacturingPmiParticulars.PurchasingVolumeIndex = field.NewString(tableName, "purchasing_volume_index")
	_manufacturingPmiParticulars.ImportIndex = field.NewString(tableName, "import_index")
	_manufacturingPmiParticulars.PurchasingPriceIndex = field.NewString(tableName, "purchasing_price_index")
	_manufacturingPmiParticulars.InventoryIndexOfRawMaterials = field.NewString(tableName, "inventory_index_of_raw_materials")
	_manufacturingPmiParticulars.EmployeeIndex = field.NewString(tableName, "employee_index")
	_manufacturingPmiParticulars.SupplierDeliveryTimeIndex = field.NewString(tableName, "supplier_delivery_time_index")

	_manufacturingPmiParticulars.fillFieldMap()

	return _manufacturingPmiParticulars
}

type manufacturingPmiParticulars struct {
	manufacturingPmiParticularsDo manufacturingPmiParticularsDo

	ALL                               field.Asterisk
	Date                              field.String
	Pmi                               field.String
	ProductionIndex                   field.String
	IndexOfNewOrders                  field.String
	IndexOfNewExportOrders            field.String
	BacklogIndex                      field.String
	IndexOfInventoriesOfFinishedGoods field.String
	PurchasingVolumeIndex             field.String
	ImportIndex                       field.String
	PurchasingPriceIndex              field.String
	InventoryIndexOfRawMaterials      field.String
	EmployeeIndex                     field.String
	SupplierDeliveryTimeIndex         field.String

	fieldMap map[string]field.Expr
}

func (m manufacturingPmiParticulars) Table(newTableName string) *manufacturingPmiParticulars {
	m.manufacturingPmiParticularsDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m manufacturingPmiParticulars) As(alias string) *manufacturingPmiParticulars {
	m.manufacturingPmiParticularsDo.DO = *(m.manufacturingPmiParticularsDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *manufacturingPmiParticulars) updateTableName(table string) *manufacturingPmiParticulars {
	m.ALL = field.NewAsterisk(table)
	m.Date = field.NewString(table, "date")
	m.Pmi = field.NewString(table, "pmi")
	m.ProductionIndex = field.NewString(table, "production_index")
	m.IndexOfNewOrders = field.NewString(table, "index_of_new_orders")
	m.IndexOfNewExportOrders = field.NewString(table, "index_of_new_export_orders")
	m.BacklogIndex = field.NewString(table, "backlog_index")
	m.IndexOfInventoriesOfFinishedGoods = field.NewString(table, "index_of_inventories_of_finished_goods")
	m.PurchasingVolumeIndex = field.NewString(table, "purchasing_volume_index")
	m.ImportIndex = field.NewString(table, "import_index")
	m.PurchasingPriceIndex = field.NewString(table, "purchasing_price_index")
	m.InventoryIndexOfRawMaterials = field.NewString(table, "inventory_index_of_raw_materials")
	m.EmployeeIndex = field.NewString(table, "employee_index")
	m.SupplierDeliveryTimeIndex = field.NewString(table, "supplier_delivery_time_index")

	m.fillFieldMap()

	return m
}

func (m *manufacturingPmiParticulars) WithContext(ctx context.Context) *manufacturingPmiParticularsDo {
	return m.manufacturingPmiParticularsDo.WithContext(ctx)
}

func (m manufacturingPmiParticulars) TableName() string {
	return m.manufacturingPmiParticularsDo.TableName()
}

func (m manufacturingPmiParticulars) Alias() string { return m.manufacturingPmiParticularsDo.Alias() }

func (m *manufacturingPmiParticulars) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *manufacturingPmiParticulars) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["date"] = m.Date
	m.fieldMap["pmi"] = m.Pmi
	m.fieldMap["production_index"] = m.ProductionIndex
	m.fieldMap["index_of_new_orders"] = m.IndexOfNewOrders
	m.fieldMap["index_of_new_export_orders"] = m.IndexOfNewExportOrders
	m.fieldMap["backlog_index"] = m.BacklogIndex
	m.fieldMap["index_of_inventories_of_finished_goods"] = m.IndexOfInventoriesOfFinishedGoods
	m.fieldMap["purchasing_volume_index"] = m.PurchasingVolumeIndex
	m.fieldMap["import_index"] = m.ImportIndex
	m.fieldMap["purchasing_price_index"] = m.PurchasingPriceIndex
	m.fieldMap["inventory_index_of_raw_materials"] = m.InventoryIndexOfRawMaterials
	m.fieldMap["employee_index"] = m.EmployeeIndex
	m.fieldMap["supplier_delivery_time_index"] = m.SupplierDeliveryTimeIndex
}

func (m manufacturingPmiParticulars) clone(db *gorm.DB) manufacturingPmiParticulars {
	m.manufacturingPmiParticularsDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m manufacturingPmiParticulars) replaceDB(db *gorm.DB) manufacturingPmiParticulars {
	m.manufacturingPmiParticularsDo.ReplaceDB(db)
	return m
}

type manufacturingPmiParticularsDo struct{ gen.DO }

func (m manufacturingPmiParticularsDo) Debug() *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Debug())
}

func (m manufacturingPmiParticularsDo) WithContext(ctx context.Context) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m manufacturingPmiParticularsDo) ReadDB() *manufacturingPmiParticularsDo {
	return m.Clauses(dbresolver.Read)
}

func (m manufacturingPmiParticularsDo) WriteDB() *manufacturingPmiParticularsDo {
	return m.Clauses(dbresolver.Write)
}

func (m manufacturingPmiParticularsDo) Session(config *gorm.Session) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Session(config))
}

func (m manufacturingPmiParticularsDo) Clauses(conds ...clause.Expression) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m manufacturingPmiParticularsDo) Returning(value interface{}, columns ...string) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m manufacturingPmiParticularsDo) Not(conds ...gen.Condition) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m manufacturingPmiParticularsDo) Or(conds ...gen.Condition) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m manufacturingPmiParticularsDo) Select(conds ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m manufacturingPmiParticularsDo) Where(conds ...gen.Condition) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m manufacturingPmiParticularsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *manufacturingPmiParticularsDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m manufacturingPmiParticularsDo) Order(conds ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m manufacturingPmiParticularsDo) Distinct(cols ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m manufacturingPmiParticularsDo) Omit(cols ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m manufacturingPmiParticularsDo) Join(table schema.Tabler, on ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m manufacturingPmiParticularsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m manufacturingPmiParticularsDo) RightJoin(table schema.Tabler, on ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m manufacturingPmiParticularsDo) Group(cols ...field.Expr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m manufacturingPmiParticularsDo) Having(conds ...gen.Condition) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m manufacturingPmiParticularsDo) Limit(limit int) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m manufacturingPmiParticularsDo) Offset(offset int) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m manufacturingPmiParticularsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m manufacturingPmiParticularsDo) Unscoped() *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Unscoped())
}

func (m manufacturingPmiParticularsDo) Create(values ...*model.ManufacturingPmiParticulars) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m manufacturingPmiParticularsDo) CreateInBatches(values []*model.ManufacturingPmiParticulars, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m manufacturingPmiParticularsDo) Save(values ...*model.ManufacturingPmiParticulars) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m manufacturingPmiParticularsDo) First() (*model.ManufacturingPmiParticulars, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManufacturingPmiParticulars), nil
	}
}

func (m manufacturingPmiParticularsDo) Take() (*model.ManufacturingPmiParticulars, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManufacturingPmiParticulars), nil
	}
}

func (m manufacturingPmiParticularsDo) Last() (*model.ManufacturingPmiParticulars, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManufacturingPmiParticulars), nil
	}
}

func (m manufacturingPmiParticularsDo) Find() ([]*model.ManufacturingPmiParticulars, error) {
	result, err := m.DO.Find()
	return result.([]*model.ManufacturingPmiParticulars), err
}

func (m manufacturingPmiParticularsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ManufacturingPmiParticulars, err error) {
	buf := make([]*model.ManufacturingPmiParticulars, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m manufacturingPmiParticularsDo) FindInBatches(result *[]*model.ManufacturingPmiParticulars, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m manufacturingPmiParticularsDo) Attrs(attrs ...field.AssignExpr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m manufacturingPmiParticularsDo) Assign(attrs ...field.AssignExpr) *manufacturingPmiParticularsDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m manufacturingPmiParticularsDo) Joins(fields ...field.RelationField) *manufacturingPmiParticularsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m manufacturingPmiParticularsDo) Preload(fields ...field.RelationField) *manufacturingPmiParticularsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m manufacturingPmiParticularsDo) FirstOrInit() (*model.ManufacturingPmiParticulars, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManufacturingPmiParticulars), nil
	}
}

func (m manufacturingPmiParticularsDo) FirstOrCreate() (*model.ManufacturingPmiParticulars, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManufacturingPmiParticulars), nil
	}
}

func (m manufacturingPmiParticularsDo) FindByPage(offset int, limit int) (result []*model.ManufacturingPmiParticulars, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m manufacturingPmiParticularsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m manufacturingPmiParticularsDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m manufacturingPmiParticularsDo) Delete(models ...*model.ManufacturingPmiParticulars) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *manufacturingPmiParticularsDo) withDO(do gen.Dao) *manufacturingPmiParticularsDo {
	m.DO = *do.(*gen.DO)
	return m
}
