// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMacroCpi(db *gorm.DB, opts ...gen.DOOption) macroCpi {
	_macroCpi := macroCpi{}

	_macroCpi.macroCpiDo.UseDB(db, opts...)
	_macroCpi.macroCpiDo.UseModel(&model.MacroCpi{})

	tableName := _macroCpi.macroCpiDo.TableName()
	_macroCpi.ALL = field.NewAsterisk(tableName)
	_macroCpi.Date = field.NewString(tableName, "date")
	_macroCpi.Country = field.NewString(tableName, "country")
	_macroCpi.Cpi = field.NewString(tableName, "cpi")

	_macroCpi.fillFieldMap()

	return _macroCpi
}

type macroCpi struct {
	macroCpiDo macroCpiDo

	ALL     field.Asterisk
	Date    field.String
	Country field.String
	Cpi     field.String

	fieldMap map[string]field.Expr
}

func (m macroCpi) Table(newTableName string) *macroCpi {
	m.macroCpiDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m macroCpi) As(alias string) *macroCpi {
	m.macroCpiDo.DO = *(m.macroCpiDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *macroCpi) updateTableName(table string) *macroCpi {
	m.ALL = field.NewAsterisk(table)
	m.Date = field.NewString(table, "date")
	m.Country = field.NewString(table, "country")
	m.Cpi = field.NewString(table, "cpi")

	m.fillFieldMap()

	return m
}

func (m *macroCpi) WithContext(ctx context.Context) *macroCpiDo { return m.macroCpiDo.WithContext(ctx) }

func (m macroCpi) TableName() string { return m.macroCpiDo.TableName() }

func (m macroCpi) Alias() string { return m.macroCpiDo.Alias() }

func (m *macroCpi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *macroCpi) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["date"] = m.Date
	m.fieldMap["country"] = m.Country
	m.fieldMap["cpi"] = m.Cpi
}

func (m macroCpi) clone(db *gorm.DB) macroCpi {
	m.macroCpiDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m macroCpi) replaceDB(db *gorm.DB) macroCpi {
	m.macroCpiDo.ReplaceDB(db)
	return m
}

type macroCpiDo struct{ gen.DO }

func (m macroCpiDo) Debug() *macroCpiDo {
	return m.withDO(m.DO.Debug())
}

func (m macroCpiDo) WithContext(ctx context.Context) *macroCpiDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m macroCpiDo) ReadDB() *macroCpiDo {
	return m.Clauses(dbresolver.Read)
}

func (m macroCpiDo) WriteDB() *macroCpiDo {
	return m.Clauses(dbresolver.Write)
}

func (m macroCpiDo) Session(config *gorm.Session) *macroCpiDo {
	return m.withDO(m.DO.Session(config))
}

func (m macroCpiDo) Clauses(conds ...clause.Expression) *macroCpiDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m macroCpiDo) Returning(value interface{}, columns ...string) *macroCpiDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m macroCpiDo) Not(conds ...gen.Condition) *macroCpiDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m macroCpiDo) Or(conds ...gen.Condition) *macroCpiDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m macroCpiDo) Select(conds ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m macroCpiDo) Where(conds ...gen.Condition) *macroCpiDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m macroCpiDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *macroCpiDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m macroCpiDo) Order(conds ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m macroCpiDo) Distinct(cols ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m macroCpiDo) Omit(cols ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m macroCpiDo) Join(table schema.Tabler, on ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m macroCpiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m macroCpiDo) RightJoin(table schema.Tabler, on ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m macroCpiDo) Group(cols ...field.Expr) *macroCpiDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m macroCpiDo) Having(conds ...gen.Condition) *macroCpiDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m macroCpiDo) Limit(limit int) *macroCpiDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m macroCpiDo) Offset(offset int) *macroCpiDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m macroCpiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *macroCpiDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m macroCpiDo) Unscoped() *macroCpiDo {
	return m.withDO(m.DO.Unscoped())
}

func (m macroCpiDo) Create(values ...*model.MacroCpi) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m macroCpiDo) CreateInBatches(values []*model.MacroCpi, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m macroCpiDo) Save(values ...*model.MacroCpi) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m macroCpiDo) First() (*model.MacroCpi, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroCpi), nil
	}
}

func (m macroCpiDo) Take() (*model.MacroCpi, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroCpi), nil
	}
}

func (m macroCpiDo) Last() (*model.MacroCpi, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroCpi), nil
	}
}

func (m macroCpiDo) Find() ([]*model.MacroCpi, error) {
	result, err := m.DO.Find()
	return result.([]*model.MacroCpi), err
}

func (m macroCpiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MacroCpi, err error) {
	buf := make([]*model.MacroCpi, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m macroCpiDo) FindInBatches(result *[]*model.MacroCpi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m macroCpiDo) Attrs(attrs ...field.AssignExpr) *macroCpiDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m macroCpiDo) Assign(attrs ...field.AssignExpr) *macroCpiDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m macroCpiDo) Joins(fields ...field.RelationField) *macroCpiDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m macroCpiDo) Preload(fields ...field.RelationField) *macroCpiDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m macroCpiDo) FirstOrInit() (*model.MacroCpi, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroCpi), nil
	}
}

func (m macroCpiDo) FirstOrCreate() (*model.MacroCpi, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroCpi), nil
	}
}

func (m macroCpiDo) FindByPage(offset int, limit int) (result []*model.MacroCpi, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m macroCpiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m macroCpiDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m macroCpiDo) Delete(models ...*model.MacroCpi) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *macroCpiDo) withDO(do gen.Dao) *macroCpiDo {
	m.DO = *do.(*gen.DO)
	return m
}
