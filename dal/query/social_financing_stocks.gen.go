// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSocialFinancingStock(db *gorm.DB, opts ...gen.DOOption) socialFinancingStock {
	_socialFinancingStock := socialFinancingStock{}

	_socialFinancingStock.socialFinancingStockDo.UseDB(db, opts...)
	_socialFinancingStock.socialFinancingStockDo.UseModel(&model.SocialFinancingStock{})

	tableName := _socialFinancingStock.socialFinancingStockDo.TableName()
	_socialFinancingStock.ALL = field.NewAsterisk(tableName)
	_socialFinancingStock.Date = field.NewString(tableName, "date")
	_socialFinancingStock.Ndbab = field.NewString(tableName, "ndbab")
	_socialFinancingStock.Entrustloan = field.NewString(tableName, "entrustloan")
	_socialFinancingStock.Forcloan = field.NewString(tableName, "forcloan")
	_socialFinancingStock.Rmblaon = field.NewString(tableName, "rmblaon")
	_socialFinancingStock.Bibae = field.NewString(tableName, "bibae")
	_socialFinancingStock.Tiosfs = field.NewString(tableName, "tiosfs")
	_socialFinancingStock.Sfinfe = field.NewString(tableName, "sfinfe")
	_socialFinancingStock.Trustloan = field.NewString(tableName, "trustloan")
	_socialFinancingStock.AssetBackedSecurities = field.NewString(tableName, "asset_backed_securities")
	_socialFinancingStock.LoansWrittenOff = field.NewString(tableName, "loans_written_off")
	_socialFinancingStock.GovernmentBonds = field.NewString(tableName, "government_bonds")
	_socialFinancingStock.NdbabGrowthRate = field.NewString(tableName, "ndbab_growth_rate")
	_socialFinancingStock.EntrustloanGrowthRate = field.NewString(tableName, "entrustloan_growth_rate")
	_socialFinancingStock.ForcloanGrowthRate = field.NewString(tableName, "forcloan_growth_rate")
	_socialFinancingStock.RmblaonGrowthRate = field.NewString(tableName, "rmblaon_growth_rate")
	_socialFinancingStock.BibaeGrowthRate = field.NewString(tableName, "bibae_growth_rate")
	_socialFinancingStock.TiosfsGrowthRate = field.NewString(tableName, "tiosfs_growth_rate")
	_socialFinancingStock.SfinfeGrowthRate = field.NewString(tableName, "sfinfe_growth_rate")
	_socialFinancingStock.TrustloanGrowthRate = field.NewString(tableName, "trustloan_growth_rate")
	_socialFinancingStock.AssetBackedSecuritiesGrowthRate = field.NewString(tableName, "asset_backed_securities_growth_rate")
	_socialFinancingStock.LoansWrittenOffGrowthRate = field.NewString(tableName, "loans_written_off_growth_rate")
	_socialFinancingStock.GovernmentBondsGrowthRate = field.NewString(tableName, "government_bonds_growth_rate")

	_socialFinancingStock.fillFieldMap()

	return _socialFinancingStock
}

type socialFinancingStock struct {
	socialFinancingStockDo socialFinancingStockDo

	ALL                             field.Asterisk
	Date                            field.String
	Ndbab                           field.String
	Entrustloan                     field.String
	Forcloan                        field.String
	Rmblaon                         field.String
	Bibae                           field.String
	Tiosfs                          field.String
	Sfinfe                          field.String
	Trustloan                       field.String
	AssetBackedSecurities           field.String
	LoansWrittenOff                 field.String
	GovernmentBonds                 field.String
	NdbabGrowthRate                 field.String
	EntrustloanGrowthRate           field.String
	ForcloanGrowthRate              field.String
	RmblaonGrowthRate               field.String
	BibaeGrowthRate                 field.String
	TiosfsGrowthRate                field.String
	SfinfeGrowthRate                field.String
	TrustloanGrowthRate             field.String
	AssetBackedSecuritiesGrowthRate field.String
	LoansWrittenOffGrowthRate       field.String
	GovernmentBondsGrowthRate       field.String

	fieldMap map[string]field.Expr
}

func (s socialFinancingStock) Table(newTableName string) *socialFinancingStock {
	s.socialFinancingStockDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s socialFinancingStock) As(alias string) *socialFinancingStock {
	s.socialFinancingStockDo.DO = *(s.socialFinancingStockDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *socialFinancingStock) updateTableName(table string) *socialFinancingStock {
	s.ALL = field.NewAsterisk(table)
	s.Date = field.NewString(table, "date")
	s.Ndbab = field.NewString(table, "ndbab")
	s.Entrustloan = field.NewString(table, "entrustloan")
	s.Forcloan = field.NewString(table, "forcloan")
	s.Rmblaon = field.NewString(table, "rmblaon")
	s.Bibae = field.NewString(table, "bibae")
	s.Tiosfs = field.NewString(table, "tiosfs")
	s.Sfinfe = field.NewString(table, "sfinfe")
	s.Trustloan = field.NewString(table, "trustloan")
	s.AssetBackedSecurities = field.NewString(table, "asset_backed_securities")
	s.LoansWrittenOff = field.NewString(table, "loans_written_off")
	s.GovernmentBonds = field.NewString(table, "government_bonds")
	s.NdbabGrowthRate = field.NewString(table, "ndbab_growth_rate")
	s.EntrustloanGrowthRate = field.NewString(table, "entrustloan_growth_rate")
	s.ForcloanGrowthRate = field.NewString(table, "forcloan_growth_rate")
	s.RmblaonGrowthRate = field.NewString(table, "rmblaon_growth_rate")
	s.BibaeGrowthRate = field.NewString(table, "bibae_growth_rate")
	s.TiosfsGrowthRate = field.NewString(table, "tiosfs_growth_rate")
	s.SfinfeGrowthRate = field.NewString(table, "sfinfe_growth_rate")
	s.TrustloanGrowthRate = field.NewString(table, "trustloan_growth_rate")
	s.AssetBackedSecuritiesGrowthRate = field.NewString(table, "asset_backed_securities_growth_rate")
	s.LoansWrittenOffGrowthRate = field.NewString(table, "loans_written_off_growth_rate")
	s.GovernmentBondsGrowthRate = field.NewString(table, "government_bonds_growth_rate")

	s.fillFieldMap()

	return s
}

func (s *socialFinancingStock) WithContext(ctx context.Context) *socialFinancingStockDo {
	return s.socialFinancingStockDo.WithContext(ctx)
}

func (s socialFinancingStock) TableName() string { return s.socialFinancingStockDo.TableName() }

func (s socialFinancingStock) Alias() string { return s.socialFinancingStockDo.Alias() }

func (s *socialFinancingStock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *socialFinancingStock) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 23)
	s.fieldMap["date"] = s.Date
	s.fieldMap["ndbab"] = s.Ndbab
	s.fieldMap["entrustloan"] = s.Entrustloan
	s.fieldMap["forcloan"] = s.Forcloan
	s.fieldMap["rmblaon"] = s.Rmblaon
	s.fieldMap["bibae"] = s.Bibae
	s.fieldMap["tiosfs"] = s.Tiosfs
	s.fieldMap["sfinfe"] = s.Sfinfe
	s.fieldMap["trustloan"] = s.Trustloan
	s.fieldMap["asset_backed_securities"] = s.AssetBackedSecurities
	s.fieldMap["loans_written_off"] = s.LoansWrittenOff
	s.fieldMap["government_bonds"] = s.GovernmentBonds
	s.fieldMap["ndbab_growth_rate"] = s.NdbabGrowthRate
	s.fieldMap["entrustloan_growth_rate"] = s.EntrustloanGrowthRate
	s.fieldMap["forcloan_growth_rate"] = s.ForcloanGrowthRate
	s.fieldMap["rmblaon_growth_rate"] = s.RmblaonGrowthRate
	s.fieldMap["bibae_growth_rate"] = s.BibaeGrowthRate
	s.fieldMap["tiosfs_growth_rate"] = s.TiosfsGrowthRate
	s.fieldMap["sfinfe_growth_rate"] = s.SfinfeGrowthRate
	s.fieldMap["trustloan_growth_rate"] = s.TrustloanGrowthRate
	s.fieldMap["asset_backed_securities_growth_rate"] = s.AssetBackedSecuritiesGrowthRate
	s.fieldMap["loans_written_off_growth_rate"] = s.LoansWrittenOffGrowthRate
	s.fieldMap["government_bonds_growth_rate"] = s.GovernmentBondsGrowthRate
}

func (s socialFinancingStock) clone(db *gorm.DB) socialFinancingStock {
	s.socialFinancingStockDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s socialFinancingStock) replaceDB(db *gorm.DB) socialFinancingStock {
	s.socialFinancingStockDo.ReplaceDB(db)
	return s
}

type socialFinancingStockDo struct{ gen.DO }

func (s socialFinancingStockDo) Debug() *socialFinancingStockDo {
	return s.withDO(s.DO.Debug())
}

func (s socialFinancingStockDo) WithContext(ctx context.Context) *socialFinancingStockDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s socialFinancingStockDo) ReadDB() *socialFinancingStockDo {
	return s.Clauses(dbresolver.Read)
}

func (s socialFinancingStockDo) WriteDB() *socialFinancingStockDo {
	return s.Clauses(dbresolver.Write)
}

func (s socialFinancingStockDo) Session(config *gorm.Session) *socialFinancingStockDo {
	return s.withDO(s.DO.Session(config))
}

func (s socialFinancingStockDo) Clauses(conds ...clause.Expression) *socialFinancingStockDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s socialFinancingStockDo) Returning(value interface{}, columns ...string) *socialFinancingStockDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s socialFinancingStockDo) Not(conds ...gen.Condition) *socialFinancingStockDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s socialFinancingStockDo) Or(conds ...gen.Condition) *socialFinancingStockDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s socialFinancingStockDo) Select(conds ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s socialFinancingStockDo) Where(conds ...gen.Condition) *socialFinancingStockDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s socialFinancingStockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *socialFinancingStockDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s socialFinancingStockDo) Order(conds ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s socialFinancingStockDo) Distinct(cols ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s socialFinancingStockDo) Omit(cols ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s socialFinancingStockDo) Join(table schema.Tabler, on ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s socialFinancingStockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s socialFinancingStockDo) RightJoin(table schema.Tabler, on ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s socialFinancingStockDo) Group(cols ...field.Expr) *socialFinancingStockDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s socialFinancingStockDo) Having(conds ...gen.Condition) *socialFinancingStockDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s socialFinancingStockDo) Limit(limit int) *socialFinancingStockDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s socialFinancingStockDo) Offset(offset int) *socialFinancingStockDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s socialFinancingStockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *socialFinancingStockDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s socialFinancingStockDo) Unscoped() *socialFinancingStockDo {
	return s.withDO(s.DO.Unscoped())
}

func (s socialFinancingStockDo) Create(values ...*model.SocialFinancingStock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s socialFinancingStockDo) CreateInBatches(values []*model.SocialFinancingStock, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s socialFinancingStockDo) Save(values ...*model.SocialFinancingStock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s socialFinancingStockDo) First() (*model.SocialFinancingStock, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialFinancingStock), nil
	}
}

func (s socialFinancingStockDo) Take() (*model.SocialFinancingStock, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialFinancingStock), nil
	}
}

func (s socialFinancingStockDo) Last() (*model.SocialFinancingStock, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialFinancingStock), nil
	}
}

func (s socialFinancingStockDo) Find() ([]*model.SocialFinancingStock, error) {
	result, err := s.DO.Find()
	return result.([]*model.SocialFinancingStock), err
}

func (s socialFinancingStockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SocialFinancingStock, err error) {
	buf := make([]*model.SocialFinancingStock, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s socialFinancingStockDo) FindInBatches(result *[]*model.SocialFinancingStock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s socialFinancingStockDo) Attrs(attrs ...field.AssignExpr) *socialFinancingStockDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s socialFinancingStockDo) Assign(attrs ...field.AssignExpr) *socialFinancingStockDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s socialFinancingStockDo) Joins(fields ...field.RelationField) *socialFinancingStockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s socialFinancingStockDo) Preload(fields ...field.RelationField) *socialFinancingStockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s socialFinancingStockDo) FirstOrInit() (*model.SocialFinancingStock, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialFinancingStock), nil
	}
}

func (s socialFinancingStockDo) FirstOrCreate() (*model.SocialFinancingStock, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialFinancingStock), nil
	}
}

func (s socialFinancingStockDo) FindByPage(offset int, limit int) (result []*model.SocialFinancingStock, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s socialFinancingStockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s socialFinancingStockDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s socialFinancingStockDo) Delete(models ...*model.SocialFinancingStock) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *socialFinancingStockDo) withDO(do gen.Dao) *socialFinancingStockDo {
	s.DO = *do.(*gen.DO)
	return s
}
