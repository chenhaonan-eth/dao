// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMacroGDP(db *gorm.DB, opts ...gen.DOOption) macroGDP {
	_macroGDP := macroGDP{}

	_macroGDP.macroGDPDo.UseDB(db, opts...)
	_macroGDP.macroGDPDo.UseModel(&model.MacroGDP{})

	tableName := _macroGDP.macroGDPDo.TableName()
	_macroGDP.ALL = field.NewAsterisk(tableName)
	_macroGDP.Date = field.NewString(tableName, "date")
	_macroGDP.Country = field.NewString(tableName, "country")
	_macroGDP.Gdp = field.NewString(tableName, "gdp")

	_macroGDP.fillFieldMap()

	return _macroGDP
}

type macroGDP struct {
	macroGDPDo macroGDPDo

	ALL     field.Asterisk
	Date    field.String
	Country field.String
	Gdp     field.String

	fieldMap map[string]field.Expr
}

func (m macroGDP) Table(newTableName string) *macroGDP {
	m.macroGDPDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m macroGDP) As(alias string) *macroGDP {
	m.macroGDPDo.DO = *(m.macroGDPDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *macroGDP) updateTableName(table string) *macroGDP {
	m.ALL = field.NewAsterisk(table)
	m.Date = field.NewString(table, "date")
	m.Country = field.NewString(table, "country")
	m.Gdp = field.NewString(table, "gdp")

	m.fillFieldMap()

	return m
}

func (m *macroGDP) WithContext(ctx context.Context) *macroGDPDo { return m.macroGDPDo.WithContext(ctx) }

func (m macroGDP) TableName() string { return m.macroGDPDo.TableName() }

func (m macroGDP) Alias() string { return m.macroGDPDo.Alias() }

func (m *macroGDP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *macroGDP) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["date"] = m.Date
	m.fieldMap["country"] = m.Country
	m.fieldMap["gdp"] = m.Gdp
}

func (m macroGDP) clone(db *gorm.DB) macroGDP {
	m.macroGDPDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m macroGDP) replaceDB(db *gorm.DB) macroGDP {
	m.macroGDPDo.ReplaceDB(db)
	return m
}

type macroGDPDo struct{ gen.DO }

func (m macroGDPDo) Debug() *macroGDPDo {
	return m.withDO(m.DO.Debug())
}

func (m macroGDPDo) WithContext(ctx context.Context) *macroGDPDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m macroGDPDo) ReadDB() *macroGDPDo {
	return m.Clauses(dbresolver.Read)
}

func (m macroGDPDo) WriteDB() *macroGDPDo {
	return m.Clauses(dbresolver.Write)
}

func (m macroGDPDo) Session(config *gorm.Session) *macroGDPDo {
	return m.withDO(m.DO.Session(config))
}

func (m macroGDPDo) Clauses(conds ...clause.Expression) *macroGDPDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m macroGDPDo) Returning(value interface{}, columns ...string) *macroGDPDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m macroGDPDo) Not(conds ...gen.Condition) *macroGDPDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m macroGDPDo) Or(conds ...gen.Condition) *macroGDPDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m macroGDPDo) Select(conds ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m macroGDPDo) Where(conds ...gen.Condition) *macroGDPDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m macroGDPDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *macroGDPDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m macroGDPDo) Order(conds ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m macroGDPDo) Distinct(cols ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m macroGDPDo) Omit(cols ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m macroGDPDo) Join(table schema.Tabler, on ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m macroGDPDo) LeftJoin(table schema.Tabler, on ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m macroGDPDo) RightJoin(table schema.Tabler, on ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m macroGDPDo) Group(cols ...field.Expr) *macroGDPDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m macroGDPDo) Having(conds ...gen.Condition) *macroGDPDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m macroGDPDo) Limit(limit int) *macroGDPDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m macroGDPDo) Offset(offset int) *macroGDPDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m macroGDPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *macroGDPDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m macroGDPDo) Unscoped() *macroGDPDo {
	return m.withDO(m.DO.Unscoped())
}

func (m macroGDPDo) Create(values ...*model.MacroGDP) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m macroGDPDo) CreateInBatches(values []*model.MacroGDP, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m macroGDPDo) Save(values ...*model.MacroGDP) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m macroGDPDo) First() (*model.MacroGDP, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroGDP), nil
	}
}

func (m macroGDPDo) Take() (*model.MacroGDP, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroGDP), nil
	}
}

func (m macroGDPDo) Last() (*model.MacroGDP, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroGDP), nil
	}
}

func (m macroGDPDo) Find() ([]*model.MacroGDP, error) {
	result, err := m.DO.Find()
	return result.([]*model.MacroGDP), err
}

func (m macroGDPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MacroGDP, err error) {
	buf := make([]*model.MacroGDP, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m macroGDPDo) FindInBatches(result *[]*model.MacroGDP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m macroGDPDo) Attrs(attrs ...field.AssignExpr) *macroGDPDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m macroGDPDo) Assign(attrs ...field.AssignExpr) *macroGDPDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m macroGDPDo) Joins(fields ...field.RelationField) *macroGDPDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m macroGDPDo) Preload(fields ...field.RelationField) *macroGDPDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m macroGDPDo) FirstOrInit() (*model.MacroGDP, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroGDP), nil
	}
}

func (m macroGDPDo) FirstOrCreate() (*model.MacroGDP, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MacroGDP), nil
	}
}

func (m macroGDPDo) FindByPage(offset int, limit int) (result []*model.MacroGDP, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m macroGDPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m macroGDPDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m macroGDPDo) Delete(models ...*model.MacroGDP) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *macroGDPDo) withDO(do gen.Dao) *macroGDPDo {
	m.DO = *do.(*gen.DO)
	return m
}
