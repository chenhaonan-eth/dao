// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newChinaPMI(db *gorm.DB, opts ...gen.DOOption) chinaPMI {
	_chinaPMI := chinaPMI{}

	_chinaPMI.chinaPMIDo.UseDB(db, opts...)
	_chinaPMI.chinaPMIDo.UseModel(&model.ChinaPMI{})

	tableName := _chinaPMI.chinaPMIDo.TableName()
	_chinaPMI.ALL = field.NewAsterisk(tableName)
	_chinaPMI.Date = field.NewString(tableName, "date")
	_chinaPMI.Time = field.NewString(tableName, "time")
	_chinaPMI.Manufacturing = field.NewFloat64(tableName, "manufacturing")
	_chinaPMI.ManufacturingYearOnYear = field.NewFloat64(tableName, "manufacturing_year_on_year")
	_chinaPMI.NonManufacturing = field.NewFloat64(tableName, "non_manufacturing")
	_chinaPMI.NonManufacturingYearOnYear = field.NewFloat64(tableName, "non_manufacturing_year_on_year")

	_chinaPMI.fillFieldMap()

	return _chinaPMI
}

type chinaPMI struct {
	chinaPMIDo chinaPMIDo

	ALL                        field.Asterisk
	Date                       field.String
	Time                       field.String
	Manufacturing              field.Float64
	ManufacturingYearOnYear    field.Float64
	NonManufacturing           field.Float64
	NonManufacturingYearOnYear field.Float64

	fieldMap map[string]field.Expr
}

func (c chinaPMI) Table(newTableName string) *chinaPMI {
	c.chinaPMIDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chinaPMI) As(alias string) *chinaPMI {
	c.chinaPMIDo.DO = *(c.chinaPMIDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chinaPMI) updateTableName(table string) *chinaPMI {
	c.ALL = field.NewAsterisk(table)
	c.Date = field.NewString(table, "date")
	c.Time = field.NewString(table, "time")
	c.Manufacturing = field.NewFloat64(table, "manufacturing")
	c.ManufacturingYearOnYear = field.NewFloat64(table, "manufacturing_year_on_year")
	c.NonManufacturing = field.NewFloat64(table, "non_manufacturing")
	c.NonManufacturingYearOnYear = field.NewFloat64(table, "non_manufacturing_year_on_year")

	c.fillFieldMap()

	return c
}

func (c *chinaPMI) WithContext(ctx context.Context) *chinaPMIDo { return c.chinaPMIDo.WithContext(ctx) }

func (c chinaPMI) TableName() string { return c.chinaPMIDo.TableName() }

func (c chinaPMI) Alias() string { return c.chinaPMIDo.Alias() }

func (c *chinaPMI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chinaPMI) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["date"] = c.Date
	c.fieldMap["time"] = c.Time
	c.fieldMap["manufacturing"] = c.Manufacturing
	c.fieldMap["manufacturing_year_on_year"] = c.ManufacturingYearOnYear
	c.fieldMap["non_manufacturing"] = c.NonManufacturing
	c.fieldMap["non_manufacturing_year_on_year"] = c.NonManufacturingYearOnYear
}

func (c chinaPMI) clone(db *gorm.DB) chinaPMI {
	c.chinaPMIDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chinaPMI) replaceDB(db *gorm.DB) chinaPMI {
	c.chinaPMIDo.ReplaceDB(db)
	return c
}

type chinaPMIDo struct{ gen.DO }

func (c chinaPMIDo) Debug() *chinaPMIDo {
	return c.withDO(c.DO.Debug())
}

func (c chinaPMIDo) WithContext(ctx context.Context) *chinaPMIDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chinaPMIDo) ReadDB() *chinaPMIDo {
	return c.Clauses(dbresolver.Read)
}

func (c chinaPMIDo) WriteDB() *chinaPMIDo {
	return c.Clauses(dbresolver.Write)
}

func (c chinaPMIDo) Session(config *gorm.Session) *chinaPMIDo {
	return c.withDO(c.DO.Session(config))
}

func (c chinaPMIDo) Clauses(conds ...clause.Expression) *chinaPMIDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chinaPMIDo) Returning(value interface{}, columns ...string) *chinaPMIDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chinaPMIDo) Not(conds ...gen.Condition) *chinaPMIDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chinaPMIDo) Or(conds ...gen.Condition) *chinaPMIDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chinaPMIDo) Select(conds ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chinaPMIDo) Where(conds ...gen.Condition) *chinaPMIDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chinaPMIDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *chinaPMIDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c chinaPMIDo) Order(conds ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chinaPMIDo) Distinct(cols ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chinaPMIDo) Omit(cols ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chinaPMIDo) Join(table schema.Tabler, on ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chinaPMIDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chinaPMIDo) RightJoin(table schema.Tabler, on ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chinaPMIDo) Group(cols ...field.Expr) *chinaPMIDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chinaPMIDo) Having(conds ...gen.Condition) *chinaPMIDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chinaPMIDo) Limit(limit int) *chinaPMIDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chinaPMIDo) Offset(offset int) *chinaPMIDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chinaPMIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chinaPMIDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chinaPMIDo) Unscoped() *chinaPMIDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chinaPMIDo) Create(values ...*model.ChinaPMI) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chinaPMIDo) CreateInBatches(values []*model.ChinaPMI, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chinaPMIDo) Save(values ...*model.ChinaPMI) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chinaPMIDo) First() (*model.ChinaPMI, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaPMI), nil
	}
}

func (c chinaPMIDo) Take() (*model.ChinaPMI, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaPMI), nil
	}
}

func (c chinaPMIDo) Last() (*model.ChinaPMI, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaPMI), nil
	}
}

func (c chinaPMIDo) Find() ([]*model.ChinaPMI, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChinaPMI), err
}

func (c chinaPMIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChinaPMI, err error) {
	buf := make([]*model.ChinaPMI, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chinaPMIDo) FindInBatches(result *[]*model.ChinaPMI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chinaPMIDo) Attrs(attrs ...field.AssignExpr) *chinaPMIDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chinaPMIDo) Assign(attrs ...field.AssignExpr) *chinaPMIDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chinaPMIDo) Joins(fields ...field.RelationField) *chinaPMIDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chinaPMIDo) Preload(fields ...field.RelationField) *chinaPMIDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chinaPMIDo) FirstOrInit() (*model.ChinaPMI, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaPMI), nil
	}
}

func (c chinaPMIDo) FirstOrCreate() (*model.ChinaPMI, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaPMI), nil
	}
}

func (c chinaPMIDo) FindByPage(offset int, limit int) (result []*model.ChinaPMI, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chinaPMIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chinaPMIDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chinaPMIDo) Delete(models ...*model.ChinaPMI) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chinaPMIDo) withDO(do gen.Dao) *chinaPMIDo {
	c.DO = *do.(*gen.DO)
	return c
}
