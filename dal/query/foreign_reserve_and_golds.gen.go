// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newForeignReserveAndGold(db *gorm.DB, opts ...gen.DOOption) foreignReserveAndGold {
	_foreignReserveAndGold := foreignReserveAndGold{}

	_foreignReserveAndGold.foreignReserveAndGoldDo.UseDB(db, opts...)
	_foreignReserveAndGold.foreignReserveAndGoldDo.UseModel(&model.ForeignReserveAndGold{})

	tableName := _foreignReserveAndGold.foreignReserveAndGoldDo.TableName()
	_foreignReserveAndGold.ALL = field.NewAsterisk(tableName)
	_foreignReserveAndGold.Date = field.NewString(tableName, "date")
	_foreignReserveAndGold.Gold = field.NewString(tableName, "gold")
	_foreignReserveAndGold.ForeignReserve = field.NewString(tableName, "foreign_reserve")

	_foreignReserveAndGold.fillFieldMap()

	return _foreignReserveAndGold
}

type foreignReserveAndGold struct {
	foreignReserveAndGoldDo foreignReserveAndGoldDo

	ALL            field.Asterisk
	Date           field.String
	Gold           field.String
	ForeignReserve field.String

	fieldMap map[string]field.Expr
}

func (f foreignReserveAndGold) Table(newTableName string) *foreignReserveAndGold {
	f.foreignReserveAndGoldDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f foreignReserveAndGold) As(alias string) *foreignReserveAndGold {
	f.foreignReserveAndGoldDo.DO = *(f.foreignReserveAndGoldDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *foreignReserveAndGold) updateTableName(table string) *foreignReserveAndGold {
	f.ALL = field.NewAsterisk(table)
	f.Date = field.NewString(table, "date")
	f.Gold = field.NewString(table, "gold")
	f.ForeignReserve = field.NewString(table, "foreign_reserve")

	f.fillFieldMap()

	return f
}

func (f *foreignReserveAndGold) WithContext(ctx context.Context) *foreignReserveAndGoldDo {
	return f.foreignReserveAndGoldDo.WithContext(ctx)
}

func (f foreignReserveAndGold) TableName() string { return f.foreignReserveAndGoldDo.TableName() }

func (f foreignReserveAndGold) Alias() string { return f.foreignReserveAndGoldDo.Alias() }

func (f *foreignReserveAndGold) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *foreignReserveAndGold) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["date"] = f.Date
	f.fieldMap["gold"] = f.Gold
	f.fieldMap["foreign_reserve"] = f.ForeignReserve
}

func (f foreignReserveAndGold) clone(db *gorm.DB) foreignReserveAndGold {
	f.foreignReserveAndGoldDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f foreignReserveAndGold) replaceDB(db *gorm.DB) foreignReserveAndGold {
	f.foreignReserveAndGoldDo.ReplaceDB(db)
	return f
}

type foreignReserveAndGoldDo struct{ gen.DO }

func (f foreignReserveAndGoldDo) Debug() *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Debug())
}

func (f foreignReserveAndGoldDo) WithContext(ctx context.Context) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f foreignReserveAndGoldDo) ReadDB() *foreignReserveAndGoldDo {
	return f.Clauses(dbresolver.Read)
}

func (f foreignReserveAndGoldDo) WriteDB() *foreignReserveAndGoldDo {
	return f.Clauses(dbresolver.Write)
}

func (f foreignReserveAndGoldDo) Session(config *gorm.Session) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Session(config))
}

func (f foreignReserveAndGoldDo) Clauses(conds ...clause.Expression) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f foreignReserveAndGoldDo) Returning(value interface{}, columns ...string) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f foreignReserveAndGoldDo) Not(conds ...gen.Condition) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f foreignReserveAndGoldDo) Or(conds ...gen.Condition) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f foreignReserveAndGoldDo) Select(conds ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f foreignReserveAndGoldDo) Where(conds ...gen.Condition) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f foreignReserveAndGoldDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *foreignReserveAndGoldDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f foreignReserveAndGoldDo) Order(conds ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f foreignReserveAndGoldDo) Distinct(cols ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f foreignReserveAndGoldDo) Omit(cols ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f foreignReserveAndGoldDo) Join(table schema.Tabler, on ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f foreignReserveAndGoldDo) LeftJoin(table schema.Tabler, on ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f foreignReserveAndGoldDo) RightJoin(table schema.Tabler, on ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f foreignReserveAndGoldDo) Group(cols ...field.Expr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f foreignReserveAndGoldDo) Having(conds ...gen.Condition) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f foreignReserveAndGoldDo) Limit(limit int) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f foreignReserveAndGoldDo) Offset(offset int) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f foreignReserveAndGoldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f foreignReserveAndGoldDo) Unscoped() *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Unscoped())
}

func (f foreignReserveAndGoldDo) Create(values ...*model.ForeignReserveAndGold) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f foreignReserveAndGoldDo) CreateInBatches(values []*model.ForeignReserveAndGold, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f foreignReserveAndGoldDo) Save(values ...*model.ForeignReserveAndGold) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f foreignReserveAndGoldDo) First() (*model.ForeignReserveAndGold, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ForeignReserveAndGold), nil
	}
}

func (f foreignReserveAndGoldDo) Take() (*model.ForeignReserveAndGold, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ForeignReserveAndGold), nil
	}
}

func (f foreignReserveAndGoldDo) Last() (*model.ForeignReserveAndGold, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ForeignReserveAndGold), nil
	}
}

func (f foreignReserveAndGoldDo) Find() ([]*model.ForeignReserveAndGold, error) {
	result, err := f.DO.Find()
	return result.([]*model.ForeignReserveAndGold), err
}

func (f foreignReserveAndGoldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ForeignReserveAndGold, err error) {
	buf := make([]*model.ForeignReserveAndGold, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f foreignReserveAndGoldDo) FindInBatches(result *[]*model.ForeignReserveAndGold, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f foreignReserveAndGoldDo) Attrs(attrs ...field.AssignExpr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f foreignReserveAndGoldDo) Assign(attrs ...field.AssignExpr) *foreignReserveAndGoldDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f foreignReserveAndGoldDo) Joins(fields ...field.RelationField) *foreignReserveAndGoldDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f foreignReserveAndGoldDo) Preload(fields ...field.RelationField) *foreignReserveAndGoldDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f foreignReserveAndGoldDo) FirstOrInit() (*model.ForeignReserveAndGold, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ForeignReserveAndGold), nil
	}
}

func (f foreignReserveAndGoldDo) FirstOrCreate() (*model.ForeignReserveAndGold, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ForeignReserveAndGold), nil
	}
}

func (f foreignReserveAndGoldDo) FindByPage(offset int, limit int) (result []*model.ForeignReserveAndGold, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f foreignReserveAndGoldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f foreignReserveAndGoldDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f foreignReserveAndGoldDo) Delete(models ...*model.ForeignReserveAndGold) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *foreignReserveAndGoldDo) withDO(do gen.Dao) *foreignReserveAndGoldDo {
	f.DO = *do.(*gen.DO)
	return f
}
