// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newChinaGDP(db *gorm.DB, opts ...gen.DOOption) chinaGDP {
	_chinaGDP := chinaGDP{}

	_chinaGDP.chinaGDPDo.UseDB(db, opts...)
	_chinaGDP.chinaGDPDo.UseModel(&model.ChinaGDP{})

	tableName := _chinaGDP.chinaGDPDo.TableName()
	_chinaGDP.ALL = field.NewAsterisk(tableName)
	_chinaGDP.Date = field.NewString(tableName, "date")
	_chinaGDP.Time = field.NewString(tableName, "time")
	_chinaGDP.GDP = field.NewFloat64(tableName, "gdp")
	_chinaGDP.GDPYearOnYear = field.NewFloat64(tableName, "gdp_year_on_year")
	_chinaGDP.PrimaryIndustry = field.NewFloat64(tableName, "primary_industry")
	_chinaGDP.PrimaryIndustryYearOnYear = field.NewFloat64(tableName, "primary_industry_year_on_year")
	_chinaGDP.SecondaryIndustries = field.NewFloat64(tableName, "secondary_industries")
	_chinaGDP.SecondaryIndustriesYearOnYear = field.NewFloat64(tableName, "secondary_industries_year_on_year")
	_chinaGDP.TertiaryIndustry = field.NewFloat64(tableName, "tertiary_industry")
	_chinaGDP.TertiaryIndustryYearOnYear = field.NewFloat64(tableName, "tertiary_industry_year_on_year")

	_chinaGDP.fillFieldMap()

	return _chinaGDP
}

type chinaGDP struct {
	chinaGDPDo chinaGDPDo

	ALL                           field.Asterisk
	Date                          field.String
	Time                          field.String
	GDP                           field.Float64
	GDPYearOnYear                 field.Float64
	PrimaryIndustry               field.Float64
	PrimaryIndustryYearOnYear     field.Float64
	SecondaryIndustries           field.Float64
	SecondaryIndustriesYearOnYear field.Float64
	TertiaryIndustry              field.Float64
	TertiaryIndustryYearOnYear    field.Float64

	fieldMap map[string]field.Expr
}

func (c chinaGDP) Table(newTableName string) *chinaGDP {
	c.chinaGDPDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chinaGDP) As(alias string) *chinaGDP {
	c.chinaGDPDo.DO = *(c.chinaGDPDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chinaGDP) updateTableName(table string) *chinaGDP {
	c.ALL = field.NewAsterisk(table)
	c.Date = field.NewString(table, "date")
	c.Time = field.NewString(table, "time")
	c.GDP = field.NewFloat64(table, "gdp")
	c.GDPYearOnYear = field.NewFloat64(table, "gdp_year_on_year")
	c.PrimaryIndustry = field.NewFloat64(table, "primary_industry")
	c.PrimaryIndustryYearOnYear = field.NewFloat64(table, "primary_industry_year_on_year")
	c.SecondaryIndustries = field.NewFloat64(table, "secondary_industries")
	c.SecondaryIndustriesYearOnYear = field.NewFloat64(table, "secondary_industries_year_on_year")
	c.TertiaryIndustry = field.NewFloat64(table, "tertiary_industry")
	c.TertiaryIndustryYearOnYear = field.NewFloat64(table, "tertiary_industry_year_on_year")

	c.fillFieldMap()

	return c
}

func (c *chinaGDP) WithContext(ctx context.Context) *chinaGDPDo { return c.chinaGDPDo.WithContext(ctx) }

func (c chinaGDP) TableName() string { return c.chinaGDPDo.TableName() }

func (c chinaGDP) Alias() string { return c.chinaGDPDo.Alias() }

func (c *chinaGDP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chinaGDP) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["date"] = c.Date
	c.fieldMap["time"] = c.Time
	c.fieldMap["gdp"] = c.GDP
	c.fieldMap["gdp_year_on_year"] = c.GDPYearOnYear
	c.fieldMap["primary_industry"] = c.PrimaryIndustry
	c.fieldMap["primary_industry_year_on_year"] = c.PrimaryIndustryYearOnYear
	c.fieldMap["secondary_industries"] = c.SecondaryIndustries
	c.fieldMap["secondary_industries_year_on_year"] = c.SecondaryIndustriesYearOnYear
	c.fieldMap["tertiary_industry"] = c.TertiaryIndustry
	c.fieldMap["tertiary_industry_year_on_year"] = c.TertiaryIndustryYearOnYear
}

func (c chinaGDP) clone(db *gorm.DB) chinaGDP {
	c.chinaGDPDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chinaGDP) replaceDB(db *gorm.DB) chinaGDP {
	c.chinaGDPDo.ReplaceDB(db)
	return c
}

type chinaGDPDo struct{ gen.DO }

func (c chinaGDPDo) Debug() *chinaGDPDo {
	return c.withDO(c.DO.Debug())
}

func (c chinaGDPDo) WithContext(ctx context.Context) *chinaGDPDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chinaGDPDo) ReadDB() *chinaGDPDo {
	return c.Clauses(dbresolver.Read)
}

func (c chinaGDPDo) WriteDB() *chinaGDPDo {
	return c.Clauses(dbresolver.Write)
}

func (c chinaGDPDo) Session(config *gorm.Session) *chinaGDPDo {
	return c.withDO(c.DO.Session(config))
}

func (c chinaGDPDo) Clauses(conds ...clause.Expression) *chinaGDPDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chinaGDPDo) Returning(value interface{}, columns ...string) *chinaGDPDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chinaGDPDo) Not(conds ...gen.Condition) *chinaGDPDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chinaGDPDo) Or(conds ...gen.Condition) *chinaGDPDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chinaGDPDo) Select(conds ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chinaGDPDo) Where(conds ...gen.Condition) *chinaGDPDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chinaGDPDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *chinaGDPDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c chinaGDPDo) Order(conds ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chinaGDPDo) Distinct(cols ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chinaGDPDo) Omit(cols ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chinaGDPDo) Join(table schema.Tabler, on ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chinaGDPDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chinaGDPDo) RightJoin(table schema.Tabler, on ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chinaGDPDo) Group(cols ...field.Expr) *chinaGDPDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chinaGDPDo) Having(conds ...gen.Condition) *chinaGDPDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chinaGDPDo) Limit(limit int) *chinaGDPDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chinaGDPDo) Offset(offset int) *chinaGDPDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chinaGDPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chinaGDPDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chinaGDPDo) Unscoped() *chinaGDPDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chinaGDPDo) Create(values ...*model.ChinaGDP) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chinaGDPDo) CreateInBatches(values []*model.ChinaGDP, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chinaGDPDo) Save(values ...*model.ChinaGDP) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chinaGDPDo) First() (*model.ChinaGDP, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaGDP), nil
	}
}

func (c chinaGDPDo) Take() (*model.ChinaGDP, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaGDP), nil
	}
}

func (c chinaGDPDo) Last() (*model.ChinaGDP, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaGDP), nil
	}
}

func (c chinaGDPDo) Find() ([]*model.ChinaGDP, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChinaGDP), err
}

func (c chinaGDPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChinaGDP, err error) {
	buf := make([]*model.ChinaGDP, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chinaGDPDo) FindInBatches(result *[]*model.ChinaGDP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chinaGDPDo) Attrs(attrs ...field.AssignExpr) *chinaGDPDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chinaGDPDo) Assign(attrs ...field.AssignExpr) *chinaGDPDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chinaGDPDo) Joins(fields ...field.RelationField) *chinaGDPDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chinaGDPDo) Preload(fields ...field.RelationField) *chinaGDPDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chinaGDPDo) FirstOrInit() (*model.ChinaGDP, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaGDP), nil
	}
}

func (c chinaGDPDo) FirstOrCreate() (*model.ChinaGDP, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChinaGDP), nil
	}
}

func (c chinaGDPDo) FindByPage(offset int, limit int) (result []*model.ChinaGDP, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chinaGDPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chinaGDPDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chinaGDPDo) Delete(models ...*model.ChinaGDP) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chinaGDPDo) withDO(do gen.Dao) *chinaGDPDo {
	c.DO = *do.(*gen.DO)
	return c
}
