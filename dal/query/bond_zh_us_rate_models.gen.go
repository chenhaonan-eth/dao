// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newBondZhUsRateModel(db *gorm.DB, opts ...gen.DOOption) bondZhUsRateModel {
	_bondZhUsRateModel := bondZhUsRateModel{}

	_bondZhUsRateModel.bondZhUsRateModelDo.UseDB(db, opts...)
	_bondZhUsRateModel.bondZhUsRateModelDo.UseModel(&model.BondZhUsRateModel{})

	tableName := _bondZhUsRateModel.bondZhUsRateModelDo.TableName()
	_bondZhUsRateModel.ALL = field.NewAsterisk(tableName)
	_bondZhUsRateModel.Date = field.NewString(tableName, "date")
	_bondZhUsRateModel.CN2Years = field.NewFloat64(tableName, "cn2_years")
	_bondZhUsRateModel.CN5Years = field.NewFloat64(tableName, "cn5_years")
	_bondZhUsRateModel.CN10Years = field.NewFloat64(tableName, "cn10_years")
	_bondZhUsRateModel.CN30Years = field.NewFloat64(tableName, "cn30_years")
	_bondZhUsRateModel.CN10_2Years = field.NewFloat64(tableName, "cn10_2_years")
	_bondZhUsRateModel.US2Years = field.NewFloat64(tableName, "us2_years")
	_bondZhUsRateModel.US5Years = field.NewFloat64(tableName, "us5_years")
	_bondZhUsRateModel.US10Years = field.NewFloat64(tableName, "us10_years")
	_bondZhUsRateModel.US30Years = field.NewFloat64(tableName, "us30_years")
	_bondZhUsRateModel.US10_2Years = field.NewFloat64(tableName, "us10_2_years")

	_bondZhUsRateModel.fillFieldMap()

	return _bondZhUsRateModel
}

type bondZhUsRateModel struct {
	bondZhUsRateModelDo bondZhUsRateModelDo

	ALL         field.Asterisk
	Date        field.String
	CN2Years    field.Float64
	CN5Years    field.Float64
	CN10Years   field.Float64
	CN30Years   field.Float64
	CN10_2Years field.Float64
	US2Years    field.Float64
	US5Years    field.Float64
	US10Years   field.Float64
	US30Years   field.Float64
	US10_2Years field.Float64

	fieldMap map[string]field.Expr
}

func (b bondZhUsRateModel) Table(newTableName string) *bondZhUsRateModel {
	b.bondZhUsRateModelDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bondZhUsRateModel) As(alias string) *bondZhUsRateModel {
	b.bondZhUsRateModelDo.DO = *(b.bondZhUsRateModelDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bondZhUsRateModel) updateTableName(table string) *bondZhUsRateModel {
	b.ALL = field.NewAsterisk(table)
	b.Date = field.NewString(table, "date")
	b.CN2Years = field.NewFloat64(table, "cn2_years")
	b.CN5Years = field.NewFloat64(table, "cn5_years")
	b.CN10Years = field.NewFloat64(table, "cn10_years")
	b.CN30Years = field.NewFloat64(table, "cn30_years")
	b.CN10_2Years = field.NewFloat64(table, "cn10_2_years")
	b.US2Years = field.NewFloat64(table, "us2_years")
	b.US5Years = field.NewFloat64(table, "us5_years")
	b.US10Years = field.NewFloat64(table, "us10_years")
	b.US30Years = field.NewFloat64(table, "us30_years")
	b.US10_2Years = field.NewFloat64(table, "us10_2_years")

	b.fillFieldMap()

	return b
}

func (b *bondZhUsRateModel) WithContext(ctx context.Context) *bondZhUsRateModelDo {
	return b.bondZhUsRateModelDo.WithContext(ctx)
}

func (b bondZhUsRateModel) TableName() string { return b.bondZhUsRateModelDo.TableName() }

func (b bondZhUsRateModel) Alias() string { return b.bondZhUsRateModelDo.Alias() }

func (b *bondZhUsRateModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bondZhUsRateModel) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 11)
	b.fieldMap["date"] = b.Date
	b.fieldMap["cn2_years"] = b.CN2Years
	b.fieldMap["cn5_years"] = b.CN5Years
	b.fieldMap["cn10_years"] = b.CN10Years
	b.fieldMap["cn30_years"] = b.CN30Years
	b.fieldMap["cn10_2_years"] = b.CN10_2Years
	b.fieldMap["us2_years"] = b.US2Years
	b.fieldMap["us5_years"] = b.US5Years
	b.fieldMap["us10_years"] = b.US10Years
	b.fieldMap["us30_years"] = b.US30Years
	b.fieldMap["us10_2_years"] = b.US10_2Years
}

func (b bondZhUsRateModel) clone(db *gorm.DB) bondZhUsRateModel {
	b.bondZhUsRateModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bondZhUsRateModel) replaceDB(db *gorm.DB) bondZhUsRateModel {
	b.bondZhUsRateModelDo.ReplaceDB(db)
	return b
}

type bondZhUsRateModelDo struct{ gen.DO }

func (b bondZhUsRateModelDo) Debug() *bondZhUsRateModelDo {
	return b.withDO(b.DO.Debug())
}

func (b bondZhUsRateModelDo) WithContext(ctx context.Context) *bondZhUsRateModelDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bondZhUsRateModelDo) ReadDB() *bondZhUsRateModelDo {
	return b.Clauses(dbresolver.Read)
}

func (b bondZhUsRateModelDo) WriteDB() *bondZhUsRateModelDo {
	return b.Clauses(dbresolver.Write)
}

func (b bondZhUsRateModelDo) Session(config *gorm.Session) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Session(config))
}

func (b bondZhUsRateModelDo) Clauses(conds ...clause.Expression) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bondZhUsRateModelDo) Returning(value interface{}, columns ...string) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bondZhUsRateModelDo) Not(conds ...gen.Condition) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bondZhUsRateModelDo) Or(conds ...gen.Condition) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bondZhUsRateModelDo) Select(conds ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bondZhUsRateModelDo) Where(conds ...gen.Condition) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bondZhUsRateModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *bondZhUsRateModelDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b bondZhUsRateModelDo) Order(conds ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bondZhUsRateModelDo) Distinct(cols ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bondZhUsRateModelDo) Omit(cols ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bondZhUsRateModelDo) Join(table schema.Tabler, on ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bondZhUsRateModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bondZhUsRateModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bondZhUsRateModelDo) Group(cols ...field.Expr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bondZhUsRateModelDo) Having(conds ...gen.Condition) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bondZhUsRateModelDo) Limit(limit int) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bondZhUsRateModelDo) Offset(offset int) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bondZhUsRateModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bondZhUsRateModelDo) Unscoped() *bondZhUsRateModelDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bondZhUsRateModelDo) Create(values ...*model.BondZhUsRateModel) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bondZhUsRateModelDo) CreateInBatches(values []*model.BondZhUsRateModel, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bondZhUsRateModelDo) Save(values ...*model.BondZhUsRateModel) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bondZhUsRateModelDo) First() (*model.BondZhUsRateModel, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BondZhUsRateModel), nil
	}
}

func (b bondZhUsRateModelDo) Take() (*model.BondZhUsRateModel, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BondZhUsRateModel), nil
	}
}

func (b bondZhUsRateModelDo) Last() (*model.BondZhUsRateModel, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BondZhUsRateModel), nil
	}
}

func (b bondZhUsRateModelDo) Find() ([]*model.BondZhUsRateModel, error) {
	result, err := b.DO.Find()
	return result.([]*model.BondZhUsRateModel), err
}

func (b bondZhUsRateModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BondZhUsRateModel, err error) {
	buf := make([]*model.BondZhUsRateModel, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bondZhUsRateModelDo) FindInBatches(result *[]*model.BondZhUsRateModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bondZhUsRateModelDo) Attrs(attrs ...field.AssignExpr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bondZhUsRateModelDo) Assign(attrs ...field.AssignExpr) *bondZhUsRateModelDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bondZhUsRateModelDo) Joins(fields ...field.RelationField) *bondZhUsRateModelDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bondZhUsRateModelDo) Preload(fields ...field.RelationField) *bondZhUsRateModelDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bondZhUsRateModelDo) FirstOrInit() (*model.BondZhUsRateModel, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BondZhUsRateModel), nil
	}
}

func (b bondZhUsRateModelDo) FirstOrCreate() (*model.BondZhUsRateModel, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BondZhUsRateModel), nil
	}
}

func (b bondZhUsRateModelDo) FindByPage(offset int, limit int) (result []*model.BondZhUsRateModel, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bondZhUsRateModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bondZhUsRateModelDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bondZhUsRateModelDo) Delete(models ...*model.BondZhUsRateModel) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bondZhUsRateModelDo) withDO(do gen.Dao) *bondZhUsRateModelDo {
	b.DO = *do.(*gen.DO)
	return b
}
