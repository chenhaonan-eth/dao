// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newNewFinancialCredit(db *gorm.DB, opts ...gen.DOOption) newFinancialCredit {
	_newFinancialCredit := newFinancialCredit{}

	_newFinancialCredit.newFinancialCreditDo.UseDB(db, opts...)
	_newFinancialCredit.newFinancialCreditDo.UseModel(&model.NewFinancialCredit{})

	tableName := _newFinancialCredit.newFinancialCreditDo.TableName()
	_newFinancialCredit.ALL = field.NewAsterisk(tableName)
	_newFinancialCredit.Date = field.NewString(tableName, "date")
	_newFinancialCredit.Time = field.NewString(tableName, "time")
	_newFinancialCredit.Loany = field.NewFloat64(tableName, "loany")
	_newFinancialCredit.LoanYearOnYear = field.NewFloat64(tableName, "loan_year_on_year")
	_newFinancialCredit.LoanyYearOverYear = field.NewFloat64(tableName, "loany_year_over_year")
	_newFinancialCredit.LoanyAcc = field.NewFloat64(tableName, "loany_acc")
	_newFinancialCredit.LoanyAccYearOnYear = field.NewFloat64(tableName, "loany_acc_year_on_year")

	_newFinancialCredit.fillFieldMap()

	return _newFinancialCredit
}

type newFinancialCredit struct {
	newFinancialCreditDo newFinancialCreditDo

	ALL                field.Asterisk
	Date               field.String
	Time               field.String
	Loany              field.Float64
	LoanYearOnYear     field.Float64
	LoanyYearOverYear  field.Float64
	LoanyAcc           field.Float64
	LoanyAccYearOnYear field.Float64

	fieldMap map[string]field.Expr
}

func (n newFinancialCredit) Table(newTableName string) *newFinancialCredit {
	n.newFinancialCreditDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n newFinancialCredit) As(alias string) *newFinancialCredit {
	n.newFinancialCreditDo.DO = *(n.newFinancialCreditDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *newFinancialCredit) updateTableName(table string) *newFinancialCredit {
	n.ALL = field.NewAsterisk(table)
	n.Date = field.NewString(table, "date")
	n.Time = field.NewString(table, "time")
	n.Loany = field.NewFloat64(table, "loany")
	n.LoanYearOnYear = field.NewFloat64(table, "loan_year_on_year")
	n.LoanyYearOverYear = field.NewFloat64(table, "loany_year_over_year")
	n.LoanyAcc = field.NewFloat64(table, "loany_acc")
	n.LoanyAccYearOnYear = field.NewFloat64(table, "loany_acc_year_on_year")

	n.fillFieldMap()

	return n
}

func (n *newFinancialCredit) WithContext(ctx context.Context) *newFinancialCreditDo {
	return n.newFinancialCreditDo.WithContext(ctx)
}

func (n newFinancialCredit) TableName() string { return n.newFinancialCreditDo.TableName() }

func (n newFinancialCredit) Alias() string { return n.newFinancialCreditDo.Alias() }

func (n *newFinancialCredit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *newFinancialCredit) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 7)
	n.fieldMap["date"] = n.Date
	n.fieldMap["time"] = n.Time
	n.fieldMap["loany"] = n.Loany
	n.fieldMap["loan_year_on_year"] = n.LoanYearOnYear
	n.fieldMap["loany_year_over_year"] = n.LoanyYearOverYear
	n.fieldMap["loany_acc"] = n.LoanyAcc
	n.fieldMap["loany_acc_year_on_year"] = n.LoanyAccYearOnYear
}

func (n newFinancialCredit) clone(db *gorm.DB) newFinancialCredit {
	n.newFinancialCreditDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n newFinancialCredit) replaceDB(db *gorm.DB) newFinancialCredit {
	n.newFinancialCreditDo.ReplaceDB(db)
	return n
}

type newFinancialCreditDo struct{ gen.DO }

func (n newFinancialCreditDo) Debug() *newFinancialCreditDo {
	return n.withDO(n.DO.Debug())
}

func (n newFinancialCreditDo) WithContext(ctx context.Context) *newFinancialCreditDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n newFinancialCreditDo) ReadDB() *newFinancialCreditDo {
	return n.Clauses(dbresolver.Read)
}

func (n newFinancialCreditDo) WriteDB() *newFinancialCreditDo {
	return n.Clauses(dbresolver.Write)
}

func (n newFinancialCreditDo) Session(config *gorm.Session) *newFinancialCreditDo {
	return n.withDO(n.DO.Session(config))
}

func (n newFinancialCreditDo) Clauses(conds ...clause.Expression) *newFinancialCreditDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n newFinancialCreditDo) Returning(value interface{}, columns ...string) *newFinancialCreditDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n newFinancialCreditDo) Not(conds ...gen.Condition) *newFinancialCreditDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n newFinancialCreditDo) Or(conds ...gen.Condition) *newFinancialCreditDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n newFinancialCreditDo) Select(conds ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n newFinancialCreditDo) Where(conds ...gen.Condition) *newFinancialCreditDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n newFinancialCreditDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *newFinancialCreditDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n newFinancialCreditDo) Order(conds ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n newFinancialCreditDo) Distinct(cols ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n newFinancialCreditDo) Omit(cols ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n newFinancialCreditDo) Join(table schema.Tabler, on ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n newFinancialCreditDo) LeftJoin(table schema.Tabler, on ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n newFinancialCreditDo) RightJoin(table schema.Tabler, on ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n newFinancialCreditDo) Group(cols ...field.Expr) *newFinancialCreditDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n newFinancialCreditDo) Having(conds ...gen.Condition) *newFinancialCreditDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n newFinancialCreditDo) Limit(limit int) *newFinancialCreditDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n newFinancialCreditDo) Offset(offset int) *newFinancialCreditDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n newFinancialCreditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *newFinancialCreditDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n newFinancialCreditDo) Unscoped() *newFinancialCreditDo {
	return n.withDO(n.DO.Unscoped())
}

func (n newFinancialCreditDo) Create(values ...*model.NewFinancialCredit) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n newFinancialCreditDo) CreateInBatches(values []*model.NewFinancialCredit, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n newFinancialCreditDo) Save(values ...*model.NewFinancialCredit) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n newFinancialCreditDo) First() (*model.NewFinancialCredit, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewFinancialCredit), nil
	}
}

func (n newFinancialCreditDo) Take() (*model.NewFinancialCredit, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewFinancialCredit), nil
	}
}

func (n newFinancialCreditDo) Last() (*model.NewFinancialCredit, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewFinancialCredit), nil
	}
}

func (n newFinancialCreditDo) Find() ([]*model.NewFinancialCredit, error) {
	result, err := n.DO.Find()
	return result.([]*model.NewFinancialCredit), err
}

func (n newFinancialCreditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewFinancialCredit, err error) {
	buf := make([]*model.NewFinancialCredit, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n newFinancialCreditDo) FindInBatches(result *[]*model.NewFinancialCredit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n newFinancialCreditDo) Attrs(attrs ...field.AssignExpr) *newFinancialCreditDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n newFinancialCreditDo) Assign(attrs ...field.AssignExpr) *newFinancialCreditDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n newFinancialCreditDo) Joins(fields ...field.RelationField) *newFinancialCreditDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n newFinancialCreditDo) Preload(fields ...field.RelationField) *newFinancialCreditDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n newFinancialCreditDo) FirstOrInit() (*model.NewFinancialCredit, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewFinancialCredit), nil
	}
}

func (n newFinancialCreditDo) FirstOrCreate() (*model.NewFinancialCredit, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewFinancialCredit), nil
	}
}

func (n newFinancialCreditDo) FindByPage(offset int, limit int) (result []*model.NewFinancialCredit, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n newFinancialCreditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n newFinancialCreditDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n newFinancialCreditDo) Delete(models ...*model.NewFinancialCredit) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *newFinancialCreditDo) withDO(do gen.Dao) *newFinancialCreditDo {
	n.DO = *do.(*gen.DO)
	return n
}
