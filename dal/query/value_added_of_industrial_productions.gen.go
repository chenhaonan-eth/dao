// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newValueAddedOfIndustrialProduction(db *gorm.DB, opts ...gen.DOOption) valueAddedOfIndustrialProduction {
	_valueAddedOfIndustrialProduction := valueAddedOfIndustrialProduction{}

	_valueAddedOfIndustrialProduction.valueAddedOfIndustrialProductionDo.UseDB(db, opts...)
	_valueAddedOfIndustrialProduction.valueAddedOfIndustrialProductionDo.UseModel(&model.ValueAddedOfIndustrialProduction{})

	tableName := _valueAddedOfIndustrialProduction.valueAddedOfIndustrialProductionDo.TableName()
	_valueAddedOfIndustrialProduction.ALL = field.NewAsterisk(tableName)
	_valueAddedOfIndustrialProduction.Date = field.NewString(tableName, "date")
	_valueAddedOfIndustrialProduction.Time = field.NewString(tableName, "time")
	_valueAddedOfIndustrialProduction.YearOnYear = field.NewFloat64(tableName, "year_on_year")
	_valueAddedOfIndustrialProduction.CumulativeGrowth = field.NewFloat64(tableName, "cumulative_growth")

	_valueAddedOfIndustrialProduction.fillFieldMap()

	return _valueAddedOfIndustrialProduction
}

type valueAddedOfIndustrialProduction struct {
	valueAddedOfIndustrialProductionDo valueAddedOfIndustrialProductionDo

	ALL              field.Asterisk
	Date             field.String
	Time             field.String
	YearOnYear       field.Float64
	CumulativeGrowth field.Float64

	fieldMap map[string]field.Expr
}

func (v valueAddedOfIndustrialProduction) Table(newTableName string) *valueAddedOfIndustrialProduction {
	v.valueAddedOfIndustrialProductionDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v valueAddedOfIndustrialProduction) As(alias string) *valueAddedOfIndustrialProduction {
	v.valueAddedOfIndustrialProductionDo.DO = *(v.valueAddedOfIndustrialProductionDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *valueAddedOfIndustrialProduction) updateTableName(table string) *valueAddedOfIndustrialProduction {
	v.ALL = field.NewAsterisk(table)
	v.Date = field.NewString(table, "date")
	v.Time = field.NewString(table, "time")
	v.YearOnYear = field.NewFloat64(table, "year_on_year")
	v.CumulativeGrowth = field.NewFloat64(table, "cumulative_growth")

	v.fillFieldMap()

	return v
}

func (v *valueAddedOfIndustrialProduction) WithContext(ctx context.Context) *valueAddedOfIndustrialProductionDo {
	return v.valueAddedOfIndustrialProductionDo.WithContext(ctx)
}

func (v valueAddedOfIndustrialProduction) TableName() string {
	return v.valueAddedOfIndustrialProductionDo.TableName()
}

func (v valueAddedOfIndustrialProduction) Alias() string {
	return v.valueAddedOfIndustrialProductionDo.Alias()
}

func (v *valueAddedOfIndustrialProduction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *valueAddedOfIndustrialProduction) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["date"] = v.Date
	v.fieldMap["time"] = v.Time
	v.fieldMap["year_on_year"] = v.YearOnYear
	v.fieldMap["cumulative_growth"] = v.CumulativeGrowth
}

func (v valueAddedOfIndustrialProduction) clone(db *gorm.DB) valueAddedOfIndustrialProduction {
	v.valueAddedOfIndustrialProductionDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v valueAddedOfIndustrialProduction) replaceDB(db *gorm.DB) valueAddedOfIndustrialProduction {
	v.valueAddedOfIndustrialProductionDo.ReplaceDB(db)
	return v
}

type valueAddedOfIndustrialProductionDo struct{ gen.DO }

func (v valueAddedOfIndustrialProductionDo) Debug() *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Debug())
}

func (v valueAddedOfIndustrialProductionDo) WithContext(ctx context.Context) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v valueAddedOfIndustrialProductionDo) ReadDB() *valueAddedOfIndustrialProductionDo {
	return v.Clauses(dbresolver.Read)
}

func (v valueAddedOfIndustrialProductionDo) WriteDB() *valueAddedOfIndustrialProductionDo {
	return v.Clauses(dbresolver.Write)
}

func (v valueAddedOfIndustrialProductionDo) Session(config *gorm.Session) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Session(config))
}

func (v valueAddedOfIndustrialProductionDo) Clauses(conds ...clause.Expression) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Returning(value interface{}, columns ...string) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v valueAddedOfIndustrialProductionDo) Not(conds ...gen.Condition) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Or(conds ...gen.Condition) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Select(conds ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Where(conds ...gen.Condition) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *valueAddedOfIndustrialProductionDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v valueAddedOfIndustrialProductionDo) Order(conds ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Distinct(cols ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v valueAddedOfIndustrialProductionDo) Omit(cols ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v valueAddedOfIndustrialProductionDo) Join(table schema.Tabler, on ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v valueAddedOfIndustrialProductionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v valueAddedOfIndustrialProductionDo) RightJoin(table schema.Tabler, on ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v valueAddedOfIndustrialProductionDo) Group(cols ...field.Expr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v valueAddedOfIndustrialProductionDo) Having(conds ...gen.Condition) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v valueAddedOfIndustrialProductionDo) Limit(limit int) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v valueAddedOfIndustrialProductionDo) Offset(offset int) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v valueAddedOfIndustrialProductionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v valueAddedOfIndustrialProductionDo) Unscoped() *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Unscoped())
}

func (v valueAddedOfIndustrialProductionDo) Create(values ...*model.ValueAddedOfIndustrialProduction) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v valueAddedOfIndustrialProductionDo) CreateInBatches(values []*model.ValueAddedOfIndustrialProduction, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v valueAddedOfIndustrialProductionDo) Save(values ...*model.ValueAddedOfIndustrialProduction) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v valueAddedOfIndustrialProductionDo) First() (*model.ValueAddedOfIndustrialProduction, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueAddedOfIndustrialProduction), nil
	}
}

func (v valueAddedOfIndustrialProductionDo) Take() (*model.ValueAddedOfIndustrialProduction, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueAddedOfIndustrialProduction), nil
	}
}

func (v valueAddedOfIndustrialProductionDo) Last() (*model.ValueAddedOfIndustrialProduction, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueAddedOfIndustrialProduction), nil
	}
}

func (v valueAddedOfIndustrialProductionDo) Find() ([]*model.ValueAddedOfIndustrialProduction, error) {
	result, err := v.DO.Find()
	return result.([]*model.ValueAddedOfIndustrialProduction), err
}

func (v valueAddedOfIndustrialProductionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ValueAddedOfIndustrialProduction, err error) {
	buf := make([]*model.ValueAddedOfIndustrialProduction, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v valueAddedOfIndustrialProductionDo) FindInBatches(result *[]*model.ValueAddedOfIndustrialProduction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v valueAddedOfIndustrialProductionDo) Attrs(attrs ...field.AssignExpr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v valueAddedOfIndustrialProductionDo) Assign(attrs ...field.AssignExpr) *valueAddedOfIndustrialProductionDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v valueAddedOfIndustrialProductionDo) Joins(fields ...field.RelationField) *valueAddedOfIndustrialProductionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v valueAddedOfIndustrialProductionDo) Preload(fields ...field.RelationField) *valueAddedOfIndustrialProductionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v valueAddedOfIndustrialProductionDo) FirstOrInit() (*model.ValueAddedOfIndustrialProduction, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueAddedOfIndustrialProduction), nil
	}
}

func (v valueAddedOfIndustrialProductionDo) FirstOrCreate() (*model.ValueAddedOfIndustrialProduction, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueAddedOfIndustrialProduction), nil
	}
}

func (v valueAddedOfIndustrialProductionDo) FindByPage(offset int, limit int) (result []*model.ValueAddedOfIndustrialProduction, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v valueAddedOfIndustrialProductionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v valueAddedOfIndustrialProductionDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v valueAddedOfIndustrialProductionDo) Delete(models ...*model.ValueAddedOfIndustrialProduction) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *valueAddedOfIndustrialProductionDo) withDO(do gen.Dao) *valueAddedOfIndustrialProductionDo {
	v.DO = *do.(*gen.DO)
	return v
}
