// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                             = new(Query)
	BondZhUsRate                  *bondZhUsRate
	FturesFoewign                 *fturesFoewign
	MacroChinaConsumerGoodsRetail *macroChinaConsumerGoodsRetail
	MacroChinaMoneySupply         *macroChinaMoneySupply
	MacroCpi                      *macroCpi
	MacroGDP                      *macroGDP
	MacroPMI                      *macroPMI
	MacroPpi                      *macroPpi
	PePbPsDvTotalmv               *pePbPsDvTotalmv
	SH300PE                       *sH300PE
	SocialFinancingFlow           *socialFinancingFlow
	SocialFinancingStock          *socialFinancingStock
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BondZhUsRate = &Q.BondZhUsRate
	FturesFoewign = &Q.FturesFoewign
	MacroChinaConsumerGoodsRetail = &Q.MacroChinaConsumerGoodsRetail
	MacroChinaMoneySupply = &Q.MacroChinaMoneySupply
	MacroCpi = &Q.MacroCpi
	MacroGDP = &Q.MacroGDP
	MacroPMI = &Q.MacroPMI
	MacroPpi = &Q.MacroPpi
	PePbPsDvTotalmv = &Q.PePbPsDvTotalmv
	SH300PE = &Q.SH300PE
	SocialFinancingFlow = &Q.SocialFinancingFlow
	SocialFinancingStock = &Q.SocialFinancingStock
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                            db,
		BondZhUsRate:                  newBondZhUsRate(db, opts...),
		FturesFoewign:                 newFturesFoewign(db, opts...),
		MacroChinaConsumerGoodsRetail: newMacroChinaConsumerGoodsRetail(db, opts...),
		MacroChinaMoneySupply:         newMacroChinaMoneySupply(db, opts...),
		MacroCpi:                      newMacroCpi(db, opts...),
		MacroGDP:                      newMacroGDP(db, opts...),
		MacroPMI:                      newMacroPMI(db, opts...),
		MacroPpi:                      newMacroPpi(db, opts...),
		PePbPsDvTotalmv:               newPePbPsDvTotalmv(db, opts...),
		SH300PE:                       newSH300PE(db, opts...),
		SocialFinancingFlow:           newSocialFinancingFlow(db, opts...),
		SocialFinancingStock:          newSocialFinancingStock(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BondZhUsRate                  bondZhUsRate
	FturesFoewign                 fturesFoewign
	MacroChinaConsumerGoodsRetail macroChinaConsumerGoodsRetail
	MacroChinaMoneySupply         macroChinaMoneySupply
	MacroCpi                      macroCpi
	MacroGDP                      macroGDP
	MacroPMI                      macroPMI
	MacroPpi                      macroPpi
	PePbPsDvTotalmv               pePbPsDvTotalmv
	SH300PE                       sH300PE
	SocialFinancingFlow           socialFinancingFlow
	SocialFinancingStock          socialFinancingStock
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                            db,
		BondZhUsRate:                  q.BondZhUsRate.clone(db),
		FturesFoewign:                 q.FturesFoewign.clone(db),
		MacroChinaConsumerGoodsRetail: q.MacroChinaConsumerGoodsRetail.clone(db),
		MacroChinaMoneySupply:         q.MacroChinaMoneySupply.clone(db),
		MacroCpi:                      q.MacroCpi.clone(db),
		MacroGDP:                      q.MacroGDP.clone(db),
		MacroPMI:                      q.MacroPMI.clone(db),
		MacroPpi:                      q.MacroPpi.clone(db),
		PePbPsDvTotalmv:               q.PePbPsDvTotalmv.clone(db),
		SH300PE:                       q.SH300PE.clone(db),
		SocialFinancingFlow:           q.SocialFinancingFlow.clone(db),
		SocialFinancingStock:          q.SocialFinancingStock.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                            db,
		BondZhUsRate:                  q.BondZhUsRate.replaceDB(db),
		FturesFoewign:                 q.FturesFoewign.replaceDB(db),
		MacroChinaConsumerGoodsRetail: q.MacroChinaConsumerGoodsRetail.replaceDB(db),
		MacroChinaMoneySupply:         q.MacroChinaMoneySupply.replaceDB(db),
		MacroCpi:                      q.MacroCpi.replaceDB(db),
		MacroGDP:                      q.MacroGDP.replaceDB(db),
		MacroPMI:                      q.MacroPMI.replaceDB(db),
		MacroPpi:                      q.MacroPpi.replaceDB(db),
		PePbPsDvTotalmv:               q.PePbPsDvTotalmv.replaceDB(db),
		SH300PE:                       q.SH300PE.replaceDB(db),
		SocialFinancingFlow:           q.SocialFinancingFlow.replaceDB(db),
		SocialFinancingStock:          q.SocialFinancingStock.replaceDB(db),
	}
}

type QueryCtx struct {
	BondZhUsRate                  *bondZhUsRateDo
	FturesFoewign                 *fturesFoewignDo
	MacroChinaConsumerGoodsRetail *macroChinaConsumerGoodsRetailDo
	MacroChinaMoneySupply         *macroChinaMoneySupplyDo
	MacroCpi                      *macroCpiDo
	MacroGDP                      *macroGDPDo
	MacroPMI                      *macroPMIDo
	MacroPpi                      *macroPpiDo
	PePbPsDvTotalmv               *pePbPsDvTotalmvDo
	SH300PE                       *sH300PEDo
	SocialFinancingFlow           *socialFinancingFlowDo
	SocialFinancingStock          *socialFinancingStockDo
}

func (q *Query) WithContext(ctx context.Context) *QueryCtx {
	return &QueryCtx{
		BondZhUsRate:                  q.BondZhUsRate.WithContext(ctx),
		FturesFoewign:                 q.FturesFoewign.WithContext(ctx),
		MacroChinaConsumerGoodsRetail: q.MacroChinaConsumerGoodsRetail.WithContext(ctx),
		MacroChinaMoneySupply:         q.MacroChinaMoneySupply.WithContext(ctx),
		MacroCpi:                      q.MacroCpi.WithContext(ctx),
		MacroGDP:                      q.MacroGDP.WithContext(ctx),
		MacroPMI:                      q.MacroPMI.WithContext(ctx),
		MacroPpi:                      q.MacroPpi.WithContext(ctx),
		PePbPsDvTotalmv:               q.PePbPsDvTotalmv.WithContext(ctx),
		SH300PE:                       q.SH300PE.WithContext(ctx),
		SocialFinancingFlow:           q.SocialFinancingFlow.WithContext(ctx),
		SocialFinancingStock:          q.SocialFinancingStock.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
