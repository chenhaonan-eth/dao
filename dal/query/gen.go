// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	BondZhUsRate          *bondZhUsRate
	MacroChinaMoneySupply *macroChinaMoneySupply
	MacroChinaShrzgm      *macroChinaShrzgm
	MacroGDP              *macroGDP
	MacroPMI              *macroPMI
	PePbPsDvTotalmv       *pePbPsDvTotalmv
	SH300PE               *sH300PE
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BondZhUsRate = &Q.BondZhUsRate
	MacroChinaMoneySupply = &Q.MacroChinaMoneySupply
	MacroChinaShrzgm = &Q.MacroChinaShrzgm
	MacroGDP = &Q.MacroGDP
	MacroPMI = &Q.MacroPMI
	PePbPsDvTotalmv = &Q.PePbPsDvTotalmv
	SH300PE = &Q.SH300PE
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		BondZhUsRate:          newBondZhUsRate(db, opts...),
		MacroChinaMoneySupply: newMacroChinaMoneySupply(db, opts...),
		MacroChinaShrzgm:      newMacroChinaShrzgm(db, opts...),
		MacroGDP:              newMacroGDP(db, opts...),
		MacroPMI:              newMacroPMI(db, opts...),
		PePbPsDvTotalmv:       newPePbPsDvTotalmv(db, opts...),
		SH300PE:               newSH300PE(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BondZhUsRate          bondZhUsRate
	MacroChinaMoneySupply macroChinaMoneySupply
	MacroChinaShrzgm      macroChinaShrzgm
	MacroGDP              macroGDP
	MacroPMI              macroPMI
	PePbPsDvTotalmv       pePbPsDvTotalmv
	SH300PE               sH300PE
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		BondZhUsRate:          q.BondZhUsRate.clone(db),
		MacroChinaMoneySupply: q.MacroChinaMoneySupply.clone(db),
		MacroChinaShrzgm:      q.MacroChinaShrzgm.clone(db),
		MacroGDP:              q.MacroGDP.clone(db),
		MacroPMI:              q.MacroPMI.clone(db),
		PePbPsDvTotalmv:       q.PePbPsDvTotalmv.clone(db),
		SH300PE:               q.SH300PE.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		BondZhUsRate:          q.BondZhUsRate.replaceDB(db),
		MacroChinaMoneySupply: q.MacroChinaMoneySupply.replaceDB(db),
		MacroChinaShrzgm:      q.MacroChinaShrzgm.replaceDB(db),
		MacroGDP:              q.MacroGDP.replaceDB(db),
		MacroPMI:              q.MacroPMI.replaceDB(db),
		PePbPsDvTotalmv:       q.PePbPsDvTotalmv.replaceDB(db),
		SH300PE:               q.SH300PE.replaceDB(db),
	}
}

type queryCtx struct {
	BondZhUsRate          *bondZhUsRateDo
	MacroChinaMoneySupply *macroChinaMoneySupplyDo
	MacroChinaShrzgm      *macroChinaShrzgmDo
	MacroGDP              *macroGDPDo
	MacroPMI              *macroPMIDo
	PePbPsDvTotalmv       *pePbPsDvTotalmvDo
	SH300PE               *sH300PEDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BondZhUsRate:          q.BondZhUsRate.WithContext(ctx),
		MacroChinaMoneySupply: q.MacroChinaMoneySupply.WithContext(ctx),
		MacroChinaShrzgm:      q.MacroChinaShrzgm.WithContext(ctx),
		MacroGDP:              q.MacroGDP.WithContext(ctx),
		MacroPMI:              q.MacroPMI.WithContext(ctx),
		PePbPsDvTotalmv:       q.PePbPsDvTotalmv.WithContext(ctx),
		SH300PE:               q.SH300PE.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
