// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/chenhaonan-eth/dao/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPmiCx(db *gorm.DB, opts ...gen.DOOption) pmiCx {
	_pmiCx := pmiCx{}

	_pmiCx.pmiCxDo.UseDB(db, opts...)
	_pmiCx.pmiCxDo.UseModel(&model.PmiCx{})

	tableName := _pmiCx.pmiCxDo.TableName()
	_pmiCx.ALL = field.NewAsterisk(tableName)
	_pmiCx.Date = field.NewString(tableName, "date")
	_pmiCx.Time = field.NewFloat64(tableName, "time")
	_pmiCx.Manufacture = field.NewFloat64(tableName, "manufacture")
	_pmiCx.ManufactureYearOverYear = field.NewFloat64(tableName, "manufacture_year_over_year")
	_pmiCx.Service = field.NewFloat64(tableName, "service")
	_pmiCx.ServiceYearOverYear = field.NewFloat64(tableName, "service_year_over_year")
	_pmiCx.Synthesis = field.NewFloat64(tableName, "synthesis")
	_pmiCx.SynthesisYearOverYear = field.NewFloat64(tableName, "synthesis_year_over_year")

	_pmiCx.fillFieldMap()

	return _pmiCx
}

type pmiCx struct {
	pmiCxDo pmiCxDo

	ALL                     field.Asterisk
	Date                    field.String
	Time                    field.Float64
	Manufacture             field.Float64
	ManufactureYearOverYear field.Float64
	Service                 field.Float64
	ServiceYearOverYear     field.Float64
	Synthesis               field.Float64
	SynthesisYearOverYear   field.Float64

	fieldMap map[string]field.Expr
}

func (p pmiCx) Table(newTableName string) *pmiCx {
	p.pmiCxDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmiCx) As(alias string) *pmiCx {
	p.pmiCxDo.DO = *(p.pmiCxDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmiCx) updateTableName(table string) *pmiCx {
	p.ALL = field.NewAsterisk(table)
	p.Date = field.NewString(table, "date")
	p.Time = field.NewFloat64(table, "time")
	p.Manufacture = field.NewFloat64(table, "manufacture")
	p.ManufactureYearOverYear = field.NewFloat64(table, "manufacture_year_over_year")
	p.Service = field.NewFloat64(table, "service")
	p.ServiceYearOverYear = field.NewFloat64(table, "service_year_over_year")
	p.Synthesis = field.NewFloat64(table, "synthesis")
	p.SynthesisYearOverYear = field.NewFloat64(table, "synthesis_year_over_year")

	p.fillFieldMap()

	return p
}

func (p *pmiCx) WithContext(ctx context.Context) *pmiCxDo { return p.pmiCxDo.WithContext(ctx) }

func (p pmiCx) TableName() string { return p.pmiCxDo.TableName() }

func (p pmiCx) Alias() string { return p.pmiCxDo.Alias() }

func (p *pmiCx) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmiCx) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["date"] = p.Date
	p.fieldMap["time"] = p.Time
	p.fieldMap["manufacture"] = p.Manufacture
	p.fieldMap["manufacture_year_over_year"] = p.ManufactureYearOverYear
	p.fieldMap["service"] = p.Service
	p.fieldMap["service_year_over_year"] = p.ServiceYearOverYear
	p.fieldMap["synthesis"] = p.Synthesis
	p.fieldMap["synthesis_year_over_year"] = p.SynthesisYearOverYear
}

func (p pmiCx) clone(db *gorm.DB) pmiCx {
	p.pmiCxDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmiCx) replaceDB(db *gorm.DB) pmiCx {
	p.pmiCxDo.ReplaceDB(db)
	return p
}

type pmiCxDo struct{ gen.DO }

func (p pmiCxDo) Debug() *pmiCxDo {
	return p.withDO(p.DO.Debug())
}

func (p pmiCxDo) WithContext(ctx context.Context) *pmiCxDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmiCxDo) ReadDB() *pmiCxDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmiCxDo) WriteDB() *pmiCxDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmiCxDo) Session(config *gorm.Session) *pmiCxDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmiCxDo) Clauses(conds ...clause.Expression) *pmiCxDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmiCxDo) Returning(value interface{}, columns ...string) *pmiCxDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmiCxDo) Not(conds ...gen.Condition) *pmiCxDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmiCxDo) Or(conds ...gen.Condition) *pmiCxDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmiCxDo) Select(conds ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmiCxDo) Where(conds ...gen.Condition) *pmiCxDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmiCxDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmiCxDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmiCxDo) Order(conds ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmiCxDo) Distinct(cols ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmiCxDo) Omit(cols ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmiCxDo) Join(table schema.Tabler, on ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmiCxDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmiCxDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmiCxDo) Group(cols ...field.Expr) *pmiCxDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmiCxDo) Having(conds ...gen.Condition) *pmiCxDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmiCxDo) Limit(limit int) *pmiCxDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmiCxDo) Offset(offset int) *pmiCxDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmiCxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmiCxDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmiCxDo) Unscoped() *pmiCxDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmiCxDo) Create(values ...*model.PmiCx) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmiCxDo) CreateInBatches(values []*model.PmiCx, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmiCxDo) Save(values ...*model.PmiCx) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmiCxDo) First() (*model.PmiCx, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmiCx), nil
	}
}

func (p pmiCxDo) Take() (*model.PmiCx, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmiCx), nil
	}
}

func (p pmiCxDo) Last() (*model.PmiCx, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmiCx), nil
	}
}

func (p pmiCxDo) Find() ([]*model.PmiCx, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmiCx), err
}

func (p pmiCxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmiCx, err error) {
	buf := make([]*model.PmiCx, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmiCxDo) FindInBatches(result *[]*model.PmiCx, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmiCxDo) Attrs(attrs ...field.AssignExpr) *pmiCxDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmiCxDo) Assign(attrs ...field.AssignExpr) *pmiCxDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmiCxDo) Joins(fields ...field.RelationField) *pmiCxDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmiCxDo) Preload(fields ...field.RelationField) *pmiCxDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmiCxDo) FirstOrInit() (*model.PmiCx, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmiCx), nil
	}
}

func (p pmiCxDo) FirstOrCreate() (*model.PmiCx, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmiCx), nil
	}
}

func (p pmiCxDo) FindByPage(offset int, limit int) (result []*model.PmiCx, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmiCxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmiCxDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmiCxDo) Delete(models ...*model.PmiCx) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmiCxDo) withDO(do gen.Dao) *pmiCxDo {
	p.DO = *do.(*gen.DO)
	return p
}
